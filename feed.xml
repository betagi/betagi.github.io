<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://betagi.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://betagi.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-08-16T00:22:23+00:00</updated><id>https://betagi.github.io/feed.xml</id><title type="html">『』</title><subtitle>个人主页 </subtitle><entry><title type="html">使用jekyll搭建个人博客</title><link href="https://betagi.github.io/blog/2024/%E4%BD%BF%E7%94%A8jekyll%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.md/" rel="alternate" type="text/html" title="使用jekyll搭建个人博客"/><published>2024-07-07T04:00:00+00:00</published><updated>2024-07-07T04:00:00+00:00</updated><id>https://betagi.github.io/blog/2024/%E4%BD%BF%E7%94%A8jekyll%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.md</id><content type="html" xml:base="https://betagi.github.io/blog/2024/%E4%BD%BF%E7%94%A8jekyll%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2.md/"><![CDATA[<h2 id="jekyll介绍">Jekyll介绍</h2> <p>Jekyll是一个简单、可扩展的静态站点生成器。它将文本内容转换为静态网站和博客。Jekyll<a href="https://github.com/topics/jekyll-theme">主题</a>丰富，同时作者会提供详细的部署教程文档。</p> <p>通过用Jekyll生成静态网站、Github Pages提供托管服务，就可以方便地实现个人博客/小型网站的托管。</p> <h2 id="jekyll-on-mac">Jekyll on Mac</h2> <h3 id="安装步骤">安装步骤：</h3> <ol> <li>安装<a href="https://brew.sh">Homebrew</a></li> </ol> <ul> <li> <p>Homebrew是MacOS的包管理工具，方便软件的安装和更新。</p> </li> <li> <p>brew的安装命令：</p> </li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/bash <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div> <ul> <li>检查brew信息：</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 查看版本</span>
brew - v
<span class="c"># 升级并检查brew</span>
brew update <span class="o">&amp;&amp;</span> brew doctor
</code></pre></div></div> <ol> <li>安装<a href="https://www.ruby-lang.org/en/">Ruby</a></li> </ol> <p>虽然macOS预装了Ruby，但考虑到此版本过时且无法更新，因此并不建议使用系统Ruby。</p> <ul> <li>使用brew安装Ruby：</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>ruby chruby
<span class="c"># 添加ruby路径到环境变量</span>
<span class="nb">echo</span> <span class="s1">'export PATH="/opt/homebrew/opt/ruby/bin:$PATH"'</span> <span class="o">&gt;&gt;</span> ~/.zshrc
<span class="nb">source</span> ~/.zshrc
</code></pre></div></div> <ul> <li>检查ruby信息：</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>which ruby 
ruby <span class="nt">-v</span>
</code></pre></div></div> <ol> <li>安装<a href="https://jekyllcn.com">jekyll</a></li> </ol> <ul> <li>使用<code class="language-plaintext highlighter-rouge">gem</code>安装jekyll：</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem <span class="nb">install </span>jekyll bundler
</code></pre></div></div> <ul> <li>检查jekyll信息：</li> </ul> <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jekyll <span class="nt">-v</span>
</code></pre></div></div> <h3 id="总结">总结：</h3> <ul> <li><code class="language-plaintext highlighter-rouge">zsh</code></li> <li><code class="language-plaintext highlighter-rouge">brew</code></li> <li><code class="language-plaintext highlighter-rouge">chruby</code>：切换ruby版本</li> <li><code class="language-plaintext highlighter-rouge">ruby-install</code>：ruby下载</li> <li><code class="language-plaintext highlighter-rouge">ruby</code>：使用<code class="language-plaintext highlighter-rouge">gem</code>安装<code class="language-plaintext highlighter-rouge">bundler</code>和<code class="language-plaintext highlighter-rouge">jekyll</code></li> <li><code class="language-plaintext highlighter-rouge">bundler</code>：用于安装<code class="language-plaintext highlighter-rouge">jekyll</code>插件</li> <li><code class="language-plaintext highlighter-rouge">jekyll</code>：将纯文本转换为静态博客网站</li> </ul> <h2 id="jekyll-on-windows">Jekyll on Windows</h2> <h3 id="安装步骤-1">安装步骤：</h3> <ol> <li>安装<a href="https://scoop.sh/">Scoop</a>：</li> </ol> <ul> <li>Scoop之于Windows一如brew之于Mac，推荐下载Scoop作为包管理器</li> <li>安装Scoop，基本语法<a href="https://sspai.com/post/52496">科普</a></li> </ul> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PS</span><span class="w"> </span><span class="nx">G:\</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">iex</span><span class="w"> </span><span class="s2">"&amp; {</span><span class="si">$(</span><span class="n">irm</span><span class="w"> </span><span class="nx">get.scoop.sh</span><span class="p">)</span><span class="s2">} -RunAsAdmin"</span><span class="w">
</span></code></pre></div></div> <ol> <li>从<a href="https://rubyinstaller.org/downloads/">官网</a>下载Ruby（形如<code class="language-plaintext highlighter-rouge">Ruby+Devkit</code>文件）</li> </ol> <ul> <li> <p>安装Ruby，勾选<code class="language-plaintext highlighter-rouge">MSYS2 and MINGW development tool chain</code>选项</p> </li> <li>命令行验证是否安装成功： <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ruby</span><span class="w"> </span><span class="nt">-v</span><span class="w">
</span><span class="n">gem</span><span class="w"> </span><span class="nt">-v</span><span class="w">
</span></code></pre></div> </div> <p>未出现报错即安装成功</p> </li> <li>如果没有弹出命令行安装界面或者不小心关掉：再次输出<code class="language-plaintext highlighter-rouge">ridk install</code>以重新进入安装界面</li> </ul> <ol> <li>安装<a href="https://jekyllrb.com/docs/installation/windows/">Jekyll</a> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gem</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="nx">jekyll</span><span class="w"> </span><span class="nx">bundler</span><span class="w">
</span></code></pre></div> </div> </li> </ol> <p>命令行验证：</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">jekyll</span><span class="w"> </span><span class="nt">-v</span><span class="w">
</span></code></pre></div></div> <p>未出现报错即安装成功，Jekyll 开发环境搭建完成</p> <ol> <li>本地能够编译运行Jekyll博客： <ul> <li>安装<a href="http://jekyllthemes.org">Jekyll主题</a>，或<code class="language-plaintext highlighter-rouge">git clone</code>拉取Github项目文件，进入项目根目录中</li> <li>安装依赖包： <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bundle</span><span class="w"> </span><span class="nx">install</span><span class="w">
</span></code></pre></div> </div> </li> </ul> </li> </ol> <ul> <li>如果安装过程过于缓慢，可以尝试换源 <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bundle</span><span class="w"> </span><span class="nx">config</span><span class="w"> </span><span class="nx">mirror.https://rubygems.org</span><span class="w"> </span><span class="nx">https://gems.ruby-china.com</span><span class="w">
</span></code></pre></div> </div> <p>然后继续<code class="language-plaintext highlighter-rouge">bundle install</code></p> </li> <li>运行jekyll服务 <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bundle</span><span class="w"> </span><span class="nx">exec</span><span class="w"> </span><span class="nx">jekyll</span><span class="w"> </span><span class="nx">serve</span><span class="w">
</span></code></pre></div> </div> <p>若成功，则可以通过http://127.0.0.1:4000/ 来访问网页首页</p> </li> </ul> <h3 id="总结-1">总结：</h3> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">PS</span><span class="w"> </span><span class="nx">G:\</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">iex</span><span class="w"> </span><span class="s2">"&amp; {</span><span class="si">$(</span><span class="n">irm</span><span class="w"> </span><span class="nx">get.scoop.sh</span><span class="p">)</span><span class="s2">} -RunAsAdmin"</span><span class="w">

</span><span class="n">PS</span><span class="w"> </span><span class="nx">G:\</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">scoop</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="nx">git</span><span class="w">
</span><span class="s1">'git'</span><span class="w"> </span><span class="p">(</span><span class="mf">2.46</span><span class="o">.</span><span class="nf">0</span><span class="p">)</span><span class="w"> </span><span class="n">was</span><span class="w"> </span><span class="nx">installed</span><span class="w"> </span><span class="nx">successfully</span><span class="o">!</span><span class="w">

</span><span class="n">PS</span><span class="w"> </span><span class="nx">G:\</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">scoop</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="nx">ruby</span><span class="w">
</span><span class="s1">'ruby'</span><span class="w"> </span><span class="p">(</span><span class="mf">3.3</span><span class="o">.</span><span class="nf">4-1</span><span class="p">)</span><span class="w"> </span><span class="n">was</span><span class="w"> </span><span class="nx">installed</span><span class="w"> </span><span class="nx">successfully</span><span class="o">!</span><span class="w">

</span><span class="n">PS</span><span class="w"> </span><span class="nx">G:\</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">scoop</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="nx">msys2</span><span class="w">
</span><span class="s1">'msys2'</span><span class="w"> </span><span class="p">(</span><span class="mi">2024</span><span class="nt">-07-27</span><span class="p">)</span><span class="w"> </span><span class="n">was</span><span class="w"> </span><span class="nx">installed</span><span class="w"> </span><span class="nx">successfully</span><span class="o">!</span><span class="w">

</span><span class="n">PS</span><span class="w"> </span><span class="nx">G:\</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">msys2</span><span class="w">
</span><span class="n">Initial</span><span class="w"> </span><span class="nx">setup</span><span class="w"> </span><span class="nx">complete.</span><span class="w"> </span><span class="nx">MSYS2</span><span class="w"> </span><span class="nx">is</span><span class="w"> </span><span class="nx">now</span><span class="w"> </span><span class="nx">ready</span><span class="w"> </span><span class="nx">to</span><span class="w"> </span><span class="nx">use.</span><span class="w">

</span><span class="n">PS</span><span class="w"> </span><span class="nx">G:\</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">ridk</span><span class="w"> </span><span class="nx">install</span><span class="w">
</span><span class="n">Install</span><span class="w"> </span><span class="nx">MSYS2</span><span class="w"> </span><span class="nx">and</span><span class="w"> </span><span class="nx">MINGW</span><span class="w"> </span><span class="nx">development</span><span class="w"> </span><span class="nx">toolchain</span><span class="w"> </span><span class="nx">succeeded</span><span class="w">

</span><span class="n">PS</span><span class="w"> </span><span class="nx">G:\</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">ruby</span><span class="w"> </span><span class="nt">-v</span><span class="w">
</span><span class="n">ruby</span><span class="w"> </span><span class="nx">3.3.4</span><span class="w"> </span><span class="p">(</span><span class="mi">2024</span><span class="nt">-07-09</span><span class="w"> </span><span class="n">revision</span><span class="w"> </span><span class="nx">be1089c8ec</span><span class="p">)</span><span class="w"> </span><span class="p">[</span><span class="n">x64</span><span class="nt">-mingw-ucrt</span><span class="p">]</span><span class="w">

</span><span class="n">PS</span><span class="w"> </span><span class="nx">G:\</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">gem</span><span class="w"> </span><span class="nt">-v</span><span class="w">
</span><span class="mf">3.5</span><span class="o">.</span><span class="nf">11</span><span class="w">

</span><span class="n">PS</span><span class="w"> </span><span class="nx">G:\</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">gem</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="nx">jekyll</span><span class="w"> </span><span class="nx">bundler</span><span class="w">
</span><span class="mi">30</span><span class="w"> </span><span class="n">gems</span><span class="w"> </span><span class="nx">installed</span><span class="w">

</span><span class="n">PS</span><span class="w"> </span><span class="nx">G:\</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">jekyll</span><span class="w"> </span><span class="nt">-v</span><span class="w">
</span><span class="n">jekyll</span><span class="w"> </span><span class="nx">4.3.3</span><span class="w">

</span><span class="n">PS</span><span class="w"> </span><span class="nx">G:\website</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">bundle</span><span class="w"> </span><span class="nx">install</span><span class="w">
</span><span class="n">Resolving</span><span class="w"> </span><span class="nx">dependencies...</span><span class="w">
</span><span class="n">Bundle</span><span class="w"> </span><span class="nx">complete</span><span class="o">!</span><span class="w">

</span><span class="n">PS</span><span class="w"> </span><span class="nx">G:\website</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">bundle</span><span class="w"> </span><span class="nx">exec</span><span class="w"> </span><span class="nx">jekyll</span><span class="w"> </span><span class="nx">serve</span><span class="w">
</span></code></pre></div></div> <h2 id="博客的更新与维护">博客的更新与维护</h2> <h3 id="格式要求">格式要求：</h3> <p><a href="https://github.com/cotes2020/chirpy-starter">Chirpy主题</a>有特定的格式要求，在上传markdown之前要先了解一下。</p> <ol> <li> <p>文件位置和命名： 须在本地的<code class="language-plaintext highlighter-rouge">_posts</code>文件夹下创建markdown文档，文件名格式为<code class="language-plaintext highlighter-rouge">YYYY-MM-DD-TITLE.md</code></p> </li> <li> <p>文件内容： 前几行的格式为：</p> <div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">title</span><span class="pi">:</span> <span class="s">使用jekyll搭建个人博客</span>
<span class="na">date</span><span class="pi">:</span> <span class="s">2024-7-7 12:00:00 +0800</span>
<span class="na">categories</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">Blog</span><span class="pi">,</span> <span class="nv">Build</span><span class="pi">]</span>
<span class="na">tags</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">blog</span><span class="pi">]</span>
<span class="nn">---</span>
</code></pre></div> </div> <ul> <li>date：文章的日期，</li> <li>categories：文章分类，类似树状态结构</li> <li>tages:文章的标签</li> </ul> </li> </ol> <h3 id="预览和提交">预览和提交</h3> <p>可以参考Git中常见命令</p>]]></content><author><name></name></author><category term="formatting"/><summary type="html"><![CDATA[Jekyll介绍 Jekyll是一个简单、可扩展的静态站点生成器。它将文本内容转换为静态网站和博客。Jekyll主题丰富，同时作者会提供详细的部署教程文档。 通过用Jekyll生成静态网站、Github Pages提供托管服务，就可以方便地实现个人博客/小型网站的托管。 Jekyll on Mac 安装步骤： 安装Homebrew Homebrew是MacOS的包管理工具，方便软件的安装和更新。 brew的安装命令： /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" 检查brew信息： # 查看版本 brew - v # 升级并检查brew brew update &amp;&amp; brew doctor 安装Ruby 虽然macOS预装了Ruby，但考虑到此版本过时且无法更新，因此并不建议使用系统Ruby。 使用brew安装Ruby： brew install ruby chruby # 添加ruby路径到环境变量 echo 'export PATH="/opt/homebrew/opt/ruby/bin:$PATH"' &gt;&gt; ~/.zshrc source ~/.zshrc 检查ruby信息： which ruby ruby -v 安装jekyll 使用gem安装jekyll： gem install jekyll bundler 检查jekyll信息： jekyll -v 总结： zsh brew chruby：切换ruby版本 ruby-install：ruby下载 ruby：使用gem安装bundler和jekyll bundler：用于安装jekyll插件 jekyll：将纯文本转换为静态博客网站 Jekyll on Windows 安装步骤： 安装Scoop： Scoop之于Windows一如brew之于Mac，推荐下载Scoop作为包管理器 安装Scoop，基本语法科普 PS G:\&gt; iex "&amp; {$(irm get.scoop.sh)} -RunAsAdmin" 从官网下载Ruby（形如Ruby+Devkit文件） 安装Ruby，勾选MSYS2 and MINGW development tool chain选项 命令行验证是否安装成功： ruby -v gem -v 未出现报错即安装成功 如果没有弹出命令行安装界面或者不小心关掉：再次输出ridk install以重新进入安装界面 安装Jekyll gem install jekyll bundler 命令行验证： jekyll -v 未出现报错即安装成功，Jekyll 开发环境搭建完成 本地能够编译运行Jekyll博客： 安装Jekyll主题，或git clone拉取Github项目文件，进入项目根目录中 安装依赖包： bundle install 如果安装过程过于缓慢，可以尝试换源 bundle config mirror.https://rubygems.org https://gems.ruby-china.com 然后继续bundle install 运行jekyll服务 bundle exec jekyll serve 若成功，则可以通过http://127.0.0.1:4000/ 来访问网页首页 总结： PS G:\&gt; iex "&amp; {$(irm get.scoop.sh)} -RunAsAdmin" PS G:\&gt; scoop install git 'git' (2.46.0) was installed successfully! PS G:\&gt; scoop install ruby 'ruby' (3.3.4-1) was installed successfully! PS G:\&gt; scoop install msys2 'msys2' (2024-07-27) was installed successfully! PS G:\&gt; msys2 Initial setup complete. MSYS2 is now ready to use. PS G:\&gt; ridk install Install MSYS2 and MINGW development toolchain succeeded PS G:\&gt; ruby -v ruby 3.3.4 (2024-07-09 revision be1089c8ec) [x64-mingw-ucrt] PS G:\&gt; gem -v 3.5.11 PS G:\&gt; gem install jekyll bundler 30 gems installed PS G:\&gt; jekyll -v jekyll 4.3.3 PS G:\website&gt; bundle install Resolving dependencies... Bundle complete! PS G:\website&gt; bundle exec jekyll serve 博客的更新与维护 格式要求： Chirpy主题有特定的格式要求，在上传markdown之前要先了解一下。 文件位置和命名： 须在本地的_posts文件夹下创建markdown文档，文件名格式为YYYY-MM-DD-TITLE.md 文件内容： 前几行的格式为： --- title: 使用jekyll搭建个人博客 date: 2024-7-7 12:00:00 +0800 categories: [Blog, Build] tags: [blog] --- date：文章的日期， categories：文章分类，类似树状态结构 tages:文章的标签 预览和提交 可以参考Git中常见命令]]></summary></entry><entry><title type="html">Enhancing Large Language Models with Localized Knowledge Bases</title><link href="https://betagi.github.io/blog/2024/BT_LLM/" rel="alternate" type="text/html" title="Enhancing Large Language Models with Localized Knowledge Bases"/><published>2024-06-24T00:00:00+00:00</published><updated>2024-06-24T00:00:00+00:00</updated><id>https://betagi.github.io/blog/2024/BT_LLM</id><content type="html" xml:base="https://betagi.github.io/blog/2024/BT_LLM/"><![CDATA[<h1 id="摘要">摘要</h1> <p>本论文重点关注了当前大语言模型缺乏私域知识的问题，并实践了一种通过集成本地化知识库的方法来尝试解决该问题。为此，我们以重庆大学<a href="https://eie.cqu.edu.cn">卓越工程师学院</a>的专有信息搭建了开源大语言模型的本地知识库并进行评估。评估结果显示该方法大幅提高了大语言模型问答的准确性，同时减少了“幻觉”现象的发生，从而为大语言模型赋能增效。另外，本论文还尝试探讨了语言模型的演变及其应用，在追溯从统计语言模型到基于Transformer架构的语言模型发展历程的同时对大语言模型的内在机制进行阐释。本文将为大语言模型的行业应用以及可解释性人工智能等领域贡献独特视角，为未来更可靠、透明的AI系统的设计提供潜在价值。</p> <h1 id="abstract">Abstract</h1> <p>This thesis focuses on addressing the issue of insufficient domain-specific knowledge in current large language models (LLMs) by implementing an approach that integrates localized knowledge bases. To this end, we have constructed a localized knowledge base for an open-source large language model using exclusive information from Chongqing University’s <a href="https://eie.cqu.edu.cn">Elite Institute of Engineering</a> (EIE). Our evaluations show that this method significantly improves the accuracy of the LLM’s question-answering capabilities while reducing the occurrence of “hallucinations”, thus enhancing the power and efficiency of language models. Additionally, this thesis explores the evolution and application of language models, tracing the development from statistical language models to transformer-based architectures and elucidating the internal mechanisms of LLMs. This work offers unique perspectives for the industry application of LLMs and explainable AI, contributing to the design of more reliable and transparent AI systems in the future.</p> <h1 id="1-introduction">1. Introduction</h1> <h2 id="11-motivation">1.1 Motivation</h2> <p>Large Language Models (LLMs) have significantly advanced natural language processing, demonstrating exceptional capabilities in generating complex and coherent text. At its core, a language model calculates the probability distribution of the upcoming sequences of words in a given context <d-cite key="Martin2024"></d-cite>. However, the opaque internal mechanisms of language models often function as “black boxes”, which poses challenges on formally understanding for their decision-making processes. The foundational theory and in-depth exploration of the mathematical frameworks for understanding how neural networks work is still lacking.</p> <p>Furthermore, to enhance the reasoning capabilities and accuracy of LLMs, we propose constructing a localized knowledge base. This innovation addresses the challenge of integrating domain-specific knowledge into LLMs, facilitating more accurate and contextually relevant responses. By developing such knowledge bases, we aim to create LLM-based digital avatars capable of engaging in meaningful interactions and responding to specific queries with greater precision.</p> <p>This thesis aims to enhance the interpretability of LLMs by elucidating their intrinsic workings. Inspired by GPT-2’s architecture and recent theoretical frameworks <d-cite key="Simon23"></d-cite>, our analysis seeks to clarify how LLMs process and generate language. By exploring mechanistic interpretability and establishing localized knowledge bases, we enhance LLMs’ reliability and efficiency through access to domain-specific knowledge, which provides a clearer understanding of their internal operations and access to domain-specific knowledge for executing specific tasks.</p> <h2 id="12-thesis-structure">1.2 Thesis Structure</h2> <p>This thesis focuses on enhancing the transparency and effectiveness of LLMs by exploring mechanistic interpretability and integrating them with localized knowledge bases. Our experiments aim to develop a retrieval-augmented generation framework that improves LLMs’ accuracy and contextual relevance by dynamically incorporating domain-specific knowledge from Elite Institute of Engineering (EIE). The structure of this thesis can be listed as:</p> <ul> <li>In Chapter 2, we explore the evolution of language models from early statistical methods to sophisticated transformer-based architectures. This chapter highlights the research paradigms and significant technological advancements that have shaped modern language modeling.</li> <li>In Chapter 3, we discuss previous studies and methodologies that have influenced our approach, providing a critical analysis of current technologies and their limitations.</li> <li>In Chapter 4, we describe the methods and experimental setup used to integrate and test the effectiveness of localized knowledge bases within LLMs through the retrieval-augmented generation framework.</li> <li>In Chapter 5, we perform a thorough theoretical analysis of the internal mechanisms of LLMs, focusing on how they process and manage data. This analysis covers the dynamics of information flows and concept representations, providing insights into the mechanistic interpretability essential for explainable AI.</li> <li>In Chapter 6, we perform a thorough theoretical analysis of the internal mechanisms of LLMs, focusing on how they process and manage data. This analysis covers the dynamics of information flows and concept representations, providing insights into the mechanistic interpretability essential for explainable AI.</li> <li>In Chapter 7, we summarize the key findings and discuss the implications of this research for future studies. We outline the limitations encountered during the study and propose potential areas for further exploration to enhance the functionality and transparency of LLMs.</li> </ul> <h1 id="2-background">2. Background</h1> <p>The evolution of language models unfolds chronologically from the initial statistical language models (SLMs) to subsequent neural language models (NLMs), progressing to pre-trained language models (PLMs), and eventually to the current state of LLMs</p> <p>The progression of language modeling evolve from statistical methods to neural network-based approaches, and subsequently to the transformer architecture and Generative Pre-trained Transformers (GPTs). This evolution of language model that we present here, has been driven by the need to capture the nuanced semantic meaning of language more effectively, thereby improving the performance of language modeling tasks. In this chapter, we present a new perspective on the developments of LLMs, contrasting with the traditionally chronological and exhaustively detailed view of LLMs <d-cite key="Naveed24"></d-cite>.</p> <p>In this chapter, we will delve into the relentless pursuit of capturing nuanced semantic meaning via various kinds of language modeling methods, ranging from traditional $n$-gram models to the state-of-the-art architectures like GPT and Mamba. As each innovation builds upon the strengths of its predecessors while addressing their limitations, we can expect further advancements in language modeling to bring us closer to achieving human-level language understanding.</p> <h2 id="21-early-statistical-models">2.1 Early Statistical Models</h2> <p>Statistical Language Models (SLMs), which emerged prominently in the 1990s, are based on statistical learning methods that predict the likelihood of sequences in text. These models fundamentally rely on the Markov assumption, which assumes that the prediction of a word depends only on its predecessors, leading to the development of $n$-gram models (bigrams and trigrams are the most prevalent choices).</p> <p>In order to construct the probability distribution $P(w_1 w_2 \dots w_n)$ for a word sequence $w_1,w_2,…, w_n$, which calculates the likelihood of the given word sequence appearing as a sentence $ \bigcup\limits_{i=1}^n w_i$, for example<d-footnote>Notice that Equation \eqref{eq:1} illustrates a potential output from SLMs. Although the characters in this example are nonsensical, they underscore a critical limitation: SLMs do not inherently understand the essence of language, which could lead to the generation of such implausible linguistic sequences. This phenomenon highlights the models' comprehension on statistical correlations rather than semantic meanings, suggesting the potential for generating nonsensical yet syntactically plausible text under certain conditions.</d-footnote>:</p> \[\begin{equation} \displaylines{ P(\text{thae besst gibberish }_{gen}\text{era}^{tor}) = P(\text{thae}) \cdot P(\text{besst | thae }) \cdot \\ P(\text{gibberish | thae besst }) \cdot P(_{gen}\text{era}^{tor}\text{ | thae besst gibberish})} \label{eq:1} \end{equation}\] <p>Here we define $\mathbb{W}$ as the vocabulary of all words and $|\mathbb{W}|$ as the size of the vocabulary, $n$ is the number of words. Then, considering that sentence generation generally proceeds from left to right, the calculating process can be modeled as follows:</p> \[\begin{equation} \displaylines{ P\left(w_{1} w_{2} \ldots w_{n}\right)=P\left(w_{1}\right) P\left(w_{2} \mid w_{1}\right) P\left(w_{3} \mid w_{1} w_{2}\right) \cdot P\left(w_{n} \mid w_{1} w_{2} \ldots w_{n-1}\right) \\ =\prod_{i=1}^{n} P\left(w_{i} \mid w_{1} w_{2} w_{3} \ldots w_{n-1}\right)} \label{eq:2.2} \end{equation}\] <p>For conciseness, Let \(\{ w_i \} _{i=1}^{n-1}\) denotes the sequence \(w_1,w_2,\ldots, w_{n-1}\), then</p> \[\begin{equation*} P\left(w_{1} w_{2} \ldots w_{n}\right)= \prod_{i=1}^{n} P\left(w_{i} \mid\left\{w_{i}\right\}_{i=1}^{n-1}\right) \end{equation*}\] <p>The simplest approach to estimating \(\prod\limits_{i=1}^{n} P\left(w_{i} \mid\left\{w_{i}\right\}_{i=1}^{n-1}\right)\) based on a given corpora is to infer from the frequency of word sequences appearing in the corpora. Let $C(w_j)$ represent the count of a word sequence occurring in the corpora. By applying the principle of maximum likelihood estimation, when the sample size of words is sufficiently large, one can approximate the conditional probability between words using their relative frequencies, then:</p> \[\begin{equation} \prod_{i=1}^{n} P\left(w_{i} \mid\left\{w_{i}\right\}_{i=1}^{n-1}\right)=\frac{C\left(w_{1} w_{2} w_{3} \ldots w_{i-1} w_{i}\right)}{C\left(w_{1} w_{2} w_{3} \ldots w_{i-1}\right)} \label{eq:2.3} \end{equation}\] <p>To address issues of data sparsity inherent in high-order $n$-grams, various smoothing techniques were introduced, like <em>backoff estimation</em> and <em>Good–Turing estimation</em>. Backoff estimation allows for a graceful degradation of $n$-gram order when data is insufficient, while Good–Turing estimation adjusts the probability distribution to better account for unseen events in a dataset.</p> <p>SLMs have been critical in advancing the performance of various NLP tasks, and they are especially adept at handling relatively small corpora. However, they were constrained by the <em>curse of dimensionality</em>, as the number of possible word sequences increases exponentially with the length of the context window<d-cite key="Bengio00"></d-cite> . This exponential growth posed significant challenges in estimating probabilities for less common word sequences, leading to severe data sparsity issues and an exponential increase in possible combinations, demanding high memory and computational resources.</p> <p>Moreover, SLMs faced limitations in handling the complexity and variability of human languages<d-cite key="Martin2024"></d-cite>. Despite efforts to enhance their performance through innovations like smoothing techniques and the integration of more sophisticated probabilistic models, the inherent limitations of a purely statistical viewpoint restrict models to grasp the intricate structure of language.</p> <h2 id="22-paradigm-shift-to-neural-network-models">2.2 Paradigm Shift to Neural Network Models</h2> <p>The transition from Statistical Language Models (SLMs) to Neural Language Models (NLMs) marked a significant paradigm shift in natural language processing. While SLMs generate word sequences using probability distributions, NLMs leverage the power of neural networks to capture complex language representations.</p> <p>The pioneering work<d-cite key="Bengio00"></d-cite> introduced the concept of <em>word embeddings</em> within the framework of neural networks. By representing words as dense vectors in a continuous space, the model proposed by previous research <d-cite key="Bengio00"></d-cite> outperformed pure $n$-gram models. The word embedding matrix $\mathbf{E}$ enables the model to capture semantic and syntactic relationships between words.</p> <p><strong>Multilayer Percpetrons (MLP)</strong>. MLPs are feed-forward neural networks consisting of an input layer, one or more hidden layers, and an output layer. In the context of language modeling, MLPs take a fixed-size context window of words as input and predict the next word in the sequence.</p> <p>For an MLP with $L$ hidden layers, the activation of the $l$-th layer, $\mathbf{h}^{(l)}$ can be expressed as:</p> \[\begin{equation} \boldsymbol{h}^{(l)}=\sigma\left(\boldsymbol{W}^{(l)} \boldsymbol{h}^{(l-1)}+\boldsymbol{b}^{(l)}\right) \label{eq:2.4} \end{equation}\] <p>where $\mathbf{W}^{(l)}$ and $\mathbf{b}^{(l)}$ are the weight matrix and bias vector of the $l$-th layer, respectively, and $\sigma(\cdot)$ is a non-linear activation function, such as $\tanh$ or sigmoid. MLPs are trained using the back-propagation algorithm which is based on gradient descent optimization of a loss function:</p> \[\begin{equation} \mathcal{L}(\Theta)=-\log P(y \mid \boldsymbol{x} ; \Theta) \end{equation}\] <p>where $\Theta$ represents all the learnable parameters of the MLP. MLPs have limitations in capturing long-range dependencies due to the fixed-size context window and lack of explicit memory mechanisms, but they laid the foundation for more advanced neural network architectures, such as RNN.</p> <p><strong>Recurrent Neural Networks (RNN)</strong>. RNNs are a class of neural networks designed to process sequential data. Unlike MLPs, RNNs maintain a hidden state that serves as a memory, allowing them to capture long-term dependencies in language. RNNs addressed the sequential nature of language by maintaining a hidden state \(\mathbf{h}_{t}\) that depends on the current input \(\mathbf{x}_{t}\) and the previous hidden state \(\mathbf{h}_{t-1}\):</p> \[\begin{equation} \boldsymbol{h}_{t}=\sigma\left(\boldsymbol{W}_{h h} \boldsymbol{h}_{t-1}+\boldsymbol{W}_{x h} \boldsymbol{x}_{t}+\boldsymbol{b}_{h}\right) \end{equation}\] <p>where \(\boldsymbol{W}_{h h}\), \(\boldsymbol{W}_{x h}\) and \(\boldsymbol{b}_{ h}\) are are all learnable parameters, and $\sigma(·)$ is a non-linear activation function.</p> <p>RNNs have shown remarkable success in various natural language processing tasks because of their recurrent structure, including language modeling, machine translation, sentiment analysis, etc. However, standard RNNs suffer from the vanishing gradient problem, which hinders their ability to capture long-range dependencies effectively. To address this issue, variants of RNNs, such as Long Short-Term Memory (LSTM)<d-cite key="LSTM97"></d-cite> and Gated Recurrent Units (GRU)<d-cite key="GRU14"></d-cite> have been proposed, introducing gating mechanisms to regulate the flow of information over time.</p> <p><strong>Long Short-term Memory (LSTM)</strong>. However, training RNNs for tasks that require long-range information proved challenging due to the vanishing gradient problem. LSTM networks<d-cite key="LSTM97"></d-cite>, an extension of RNNs, addressed this issue by introducing gating mechanisms to control the flow of information:</p> \[\begin{equation} \begin{aligned} \boldsymbol{i}_{t}=\sigma\left(\boldsymbol{W}_{x i} \boldsymbol{x}_{t}+\boldsymbol{W}_{h i} \boldsymbol{h}_{t-1}+\boldsymbol{b}_{i}\right) \\ \boldsymbol{f}_{t}=\sigma\left(\boldsymbol{W}_{x f} \boldsymbol{x}_{t}+\boldsymbol{W}_{h f} \boldsymbol{h}_{t-1}+\boldsymbol{b}_{f}\right) \\ \boldsymbol{o}_{t}=\sigma\left(\boldsymbol{W}_{x o} \boldsymbol{x}_{t}+\boldsymbol{W}_{h o} \boldsymbol{h}_{t-1}+\boldsymbol{b}_{o}\right) \\ \boldsymbol{c}_{t}=\boldsymbol{f}_{t} \odot \boldsymbol{c}_{t-1}+\boldsymbol{i}_{t} \odot \tanh \left(\boldsymbol{W}_{x c} \boldsymbol{x}_{t}+\boldsymbol{W}_{h c} \boldsymbol{h}_{t-1}+\boldsymbol{b}_{c}\right) \\ \boldsymbol{h}_{t}=\boldsymbol{o}_{t} \odot \tanh \left(\boldsymbol{c}_{t}\right) \label{eq:2.7} \end{aligned} \end{equation}\] <p>where \(\mathbf{i}_{t}\), \(\mathbf{f}_{t}\) and \(\mathbf{o}_{t}\) are the <em>input</em>, <em>forget</em>, and <em>output gates</em>, respectively, and \(\mathbf{c}_{t}\) is the cell state, and \(\odot(\cdot)\) here denotes element-wise multiplication. LSTMs became the most commonly used extension to RNNs for language modeling tasks.</p> <h2 id="23-emergence-of-the-generative-pre-trained-transformer">2.3 Emergence of the Generative Pre-trained Transformer</h2> <p>The introduction of the transformer architecture by researchers at Google<d-cite key="Vaswani17"></d-cite>revolutionized neural network design for language modeling. The success of transformer architectures paved the way for the development of Pre-trained Language Models (PLMs), which leverage large-scale corpora and self-supervised learning to acquire intrinsic language knowledge. The key innovation of transformers lies in the multi-head self-attention mechanism, which allows the model to attend to different positions of the input sequence in parallel. Here we provide a brief introduction to transformer architecture.</p> <p>Given an input sequence \(\boldsymbol{X} = \{\mathbf{x}_{1}, \ldots, \mathbf{x}_{n}\}\), the self-attention mechanism computes <em>query</em>, <em>key</em>, and <em>value</em> matrices \(\boldsymbol{Q}, \mathbf{K}\) and \(\boldsymbol{V}\) by using learned projection matrices \(\boldsymbol{W}_{Q}\), \(\boldsymbol{W}_{K}\) and \(\boldsymbol{W}_{V}\). The attention scores are computed as the scaled dot product between the query and key matrices, followed by a \(\text{softmax}\) function to obtain attention weights:</p> \[\begin{equation} \begin{aligned} \boldsymbol{Q}=\boldsymbol{X}^{T} \boldsymbol{W}_{Q} \quad \boldsymbol{K}=\boldsymbol{X}^{T} \boldsymbol{W}_{K} \quad \boldsymbol{V}=\boldsymbol{X}^{T} \boldsymbol{W}_{V} \\ \operatorname{Attention}(\boldsymbol{Q}, \boldsymbol{K}, \boldsymbol{V})=\operatorname{softmax}\left(\frac{\boldsymbol{Q} \boldsymbol{K}^{T}}{\sqrt{d_{k}}}\right) \boldsymbol{V} \end{aligned} \end{equation}\] <p>where $d_k$ is the dimension of the key vectors. Multi-head attention extends this mechanism by performing self-attention in parallel across multiple heads, allowing the model to capture different aspects of the input sequence.</p> <p>The <em>Generative Pre-Trained Transformer</em> (GPT) model, introduced by OpenAI <d-cite key="Radford18"></d-cite> around the same time as the BERT <d-cite key="Devlin19"></d-cite>, is primarily composed of a stack of transformer blocks and the prominent example of PLMs. Each transformer block consists of a (masked) multi-head self-attention mechanism and a position-wise fully connected feed-forward network, with layer normalization and residual connections linking these components. The blocks are stacked together, with each layer calculating the output of the previous one, and positional encoding procedure is added to the input embedding before entering the transformer blocks.The new language modeling paradigm, closely related to <em>transfer learning</em>, allows the PLMs to gain a general syntactic and semantic understanding of the text corpus and then be trained on task-specific objectives to adapt to various tasks.</p> <p>In summary, the emergence of transformer architectures and the subsequent development of PLMs have revolutionized the field of natural language processing, enabling significant advancements in a wide range of language-related tasks, from machine translation and sentiment analysis to question-answering and text generation, and so forth. By training on vast amounts of unlabeled text data, PLMs learn rich representations of language that can be fine-tuned for various downstream tasks.</p> <h2 id="24-the-stage-of-large-language-models">2.4 The Stage of Large Language Models</h2> <div class="row mt-3"> <div class="col-12 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/BT_LLM/timeline-480.webp 480w,/assets/img/BT_LLM/timeline-800.webp 800w,/assets/img/BT_LLM/timeline-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/BT_LLM/timeline.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> <strong>Figure 2.1</strong> This timeline highlights key developments in LLMs frameworks, focusing on those exceeding a specific parameter threshold. It also includes seminal works that, although not LLMs themselves, significantly advanced the field of language modeling. Additionally, the timeline features a selection of smaller language models. Symbols denote specific types of contributions: ♣ indicates entities that function both as models and as methodological approaches, while ◆ denotes purely methodological approaches. This figure is derived from and inspired by the latest research <d-cite key="Minaee24"></d-cite>. </div> <p>Over extensive research spanning decades, language modeling has progressed from initial SLMs to the contemporary landscape of LLMs. LLMs, the large-sized PLMs, show unprecedentedly emergent abilities that go beyond traditional language modeling and start to gain capability to solve more general and complex tasks that was not seen in PLM. The remarkable examples are such as GPT-4 <d-cite key="Brown20,OpenAI23"></d-cite>, T5 <d-cite key="T5"></d-cite>, LlaMa <d-cite key="LlaMa"></d-cite>. The following paragraphs briefly introduce each component. Figure 2.1 illustrates a glimpse at the latest developments in LLMs.</p> <p><strong>Data Processing</strong>. As shown in Chapter 2, the evolution of language models highlights the importance of abundant, heterogeneous and high-scored mixture of data, necessitating the process for data.</p> <ul> <li> <p><strong>data collection</strong>: As “garbage in, garbage out” suggests, the input data for training or tuning an LLM has a direct impact on the quality of the derived model. The pursuits for data processing <d-cite key="Chen23"></d-cite> are good quality, proper diversity and large amounts. Thus the collection of diverse data, including texts from websites, academic papers, codes, and so on, demands a diverse range of data formats.</p> </li> <li> <p><strong>data cleaning</strong>: Cleaning involves identifying and correcting inaccurate and redundant elements within the raw data, such as eliminating duplicated or erroneous data, and reducing noise. Furthermore, some filtering approaches should be applied to minimize the presence of irrelevant or biased information. Moreover, safeguarding privacy is essential; therefore, personal details like names, addresses, and phone numbers should be carefully removed from the dataset before training.</p> </li> <li> <p><strong>tokenization</strong>: Analogous to the cognitive mechanisms of the human brain, languages typically simplify complex units into chunks, and in the field of NLP, the chunks are often referred to as tokens through the process known as tokenization. Historically, NLP began with word-level tokenization, using spaces and punctuation to delineate words. The trajectory of semantic representation development has progressed from the Bag-of-Words model to more sophisticated approaches, such as Word2Vec <d-cite key="Mikolov2013"></d-cite> and GloVe <d-cite key="Pennington2014"></d-cite>, all of which aim to capture semantic representations at the word level. Tokenization breaks texts down to smaller units, which can be words, subwords, or symbols. Tokenization helps LLMs to handle out-of-vocabulary words by breaking them down into subwords, which enhances the model’s adaptability.</p> </li> </ul> <p><strong>Training</strong>. The training process for LLMs consists of two main stages: unsupervised pre-training and supervised fine-tuning.</p> <ul> <li> <p><strong>unsupervised pre-training</strong>: During pre-training, LLMs are exposed to the large corpora of data, learning the underlying structure of the language without any task-specific instructions. This stage allowed the model to develop the almost all broad knowledge of language, including semantics and pragmatics, as the <em>superficial alignment hypothesis</em> suggests <d-cite key="Liu23"></d-cite>.</p> </li> <li> <p><em>instruction tuning</em>: During instruction tuning, LLMs are trained by instruction-output pairs <d-cite key="Zhang23"></d-cite> to enhance their capabilities, which come from human instructions and desired outputs respectively. The instruction tuning process constricts the outputs from LLMs under the desired responses, allowing human to intervene with the models’ behaviors.</p> </li> <li> <p><strong>fine-tuning</strong>: LLMs are refined and aligned with human values during the fine-tuning stage, through specific tasks, such as translation, question-answering, and summarization, which are trained on smaller, task-specific datasets.</p> </li> </ul> <p><strong>Components</strong>. The following paragraphs briefly introduce each component. For in-depth mathematical analysis, please refer to Chapter 5 for detailed descriptions:</p> <ul> <li> <p><strong>multi-head masked self-attention mechanism</strong>: This attention mechanism allows a model to weigh the importance of different words in a sentence. Unlike previous models such as RNN or LSTM that process words in a sequential manner, self-attention enables the model to look at all parts of the sentence simultaneously. This allows for a more nuanced understanding of context and relationships between words, regardless of their position in the sentence. The masking operation is a critical aspect of this mechanism, especially in the context of language modeling, which ensures that the prediction of a current word does not get influenced by future words.The reason for using the masked version of multi-head attention for the output embeddings is that when we are generating the output text, we do not have the next words yet because the next words are not generated yet <d-cite key="Ghojogh20"></d-cite>.</p> </li> <li> <p><strong>layer normalization and residual connections</strong>: Each transformer block in GPT includes layer normalization and residual connections. Layer normalization is applied after the self-attention mechanism and after the feed-forward network within each transformer block. It normalizes the inputs across the features, improving the stability of the model. Residual connections allow the input of each sub-layer (i.e., the self-attention and feed-forward networks) to be added to its output.</p> </li> <li> <p><strong>position-wise fully connected feed-forward network</strong>: In each transformer block in GPT, after the attention mechanism together with corresponding layer normalization and residual connection, the output is passed through a feed-forward network that applies the same transformation to each position separately and identically.</p> </li> <li> <p><strong>positional encoding</strong>: Considering transformers do not inherently process sequential data in order, they use positional encodings to incorporate information about the order of the sequence into their inputs, e.g. RoPE from @Su2021. These positional encodings are added to the input embeddings at the bottom of the model stack, providing the model with information about the position of each word in the sequence.</p> </li> </ul> <p><strong>Limitations</strong>. LLMs encounter a lot of challenges, including hallucinations, outdated or insufficient knowledge, memory issues, highly abstract reasoning tasks, mimicking human-like cognition，and much more <d-cite key="Dong22"></d-cite>. Here we outline some practical limitations of LLMs:</p> <ul> <li> <p><strong>Hallucination</strong>: The phenomenon of hallucination occurs when LLMs generate misleading or outright incorrect outputs. These errors often stem from the LLMs’ lack of real-world knowledge, biases in training data, incomplete or false information, over-fitting during training, quantization errors, and the absence of relevant contextual background in prompts, etc. In summary, despite their vast number of parameters, LLMs capture only a small fraction of real-world knowledge and are limited by the temporal scope of their training data. Hallucination raises concerns over the reliability and usefulness of LLMs in real-world applications. For example, when working with patient records and medical data, hallucinations have critical consequences.</p> </li> <li> <p><strong>Fairness</strong>: LLMs tend to inherit social prejudices from their training data, which significantly impact their fairness in tabular prediction and question-answering tasks, which is hard to mitigate through prompt engineering process. Fairness and bias mitigation techniques encompass pre-processing, in-training, intra-processing, and post-processing interventions <d-cite key="Isabel23"></d-cite>.</p> </li> <li> <p><strong>Political bias</strong>: Understanding the bias within language models is complicated due to the contextual and cultural factors. The LLMs ideology injection experiments <d-cite key="Tang23,Hartmann23"></d-cite> validate that LLM is indeed susceptible to ideologizing, as it exhibited notable emotional deviations particularly on sensitive topics, and that ChatGPT tends to exhibit a preference for left-leaning and pro-environmental viewpoints in its responses to questions.</p> </li> </ul> <p><strong>Bias mitigation</strong> <d-cite key="Guo24"></d-cite>. To address these challenges, several strategies can be implemented. Ensuring the use of high-quality data during training, supplementing domain-specific knowledge through <em>fine-tuning</em>, and employing techniques like <em>reinforcement learning from human feedback</em> (RLHF) to bias models towards more accurate data are all viable approaches. Furthermore, guiding LLMs through <em>prompt engineering</em> can also increase both the effectiveness and the controllability of LLMs. Though it is possible to iterate LLMs with new information via solutions as mentioned before, the optimization process (e.g fine-tuning) is resource-intensive, requiring substantial computational resources and time (often on the scale of days or weeks). Hence, retrieval-augmented generation(RAG) <d-cite key="RAG20"></d-cite> framework emerge as a powerful solution to the aforementioned inadequacy of LLMs and other optimization means.</p> <h2 id="25-trends-in-language-modeling">2.5 Trends in Language Modeling</h2> <p>In this part, we explore some significant trends in language modeling, focusing on pre-training, emergent abilities, scaling laws, and the move towards more efficient models. Pre-training enhances LLMs’ adaptability and transfer learning. Emergent abilities like in-context learning and multi-step reasoning enable complex task completion. Scaling laws show how increasing model size, dataset size, and computational resources improve performance. A new trend highlights that smaller, efficient models can achieve high performance, challenging the belief that bigger is always better.</p> <p><strong>Pre-training</strong>. These large-scale models demonstrate unique behaviors in tasks such as zero-shot learning, which were previously challenging for smaller-scale models. The notion of <em>pre-training</em> in this context refers to the process by which these models acquire a general understanding of language from vast corpora.</p> <p>Unlike traditional methods that often start from scratch, pre-training allows models to build upon an expansive, pre-existing linguistic framework. This approach not only enhances the efficiency of the learning process but also enables effective transfer learning. The knowledge acquired during pre-training can be applied to tasks well beyond those it was originally trained on, demonstrating the model’s adaptability and the broad applicability of its learned features.</p> <p>This trend towards larger, more capable LLMs underscores a critical shift in NLP research and development, moving from narrowly focused models to versatile, highly capable systems that can understand and interact in human-like ways across multiple languages and tasks. As we continue to push the boundaries of what these sophisticated models can achieve, the role of pre-training in achieving state-of-the-art results in NLP becomes increasingly prominent, setting the stage for future innovations in the field.</p> <p><strong>Emergent abilities of LLMs</strong>. Recent research has revealed emergent abilities of LLMs, such as improved performance on few-shot prompted tasks <d-cite key="Wei22"></d-cite> , inciting interest in both academia and industry, raising hopes that they could serve as the basics for Artificial General Intelligence (AGI). Several key emergent abilities of LLMs are critical for data understanding including <em>in-context learning</em>, <em>instruction following</em>, and <em>multi-step reasoning</em> @Fang24. In-context learning refers to designing large auto-regressive language models that generate responses on unseen task without gradient update, only learning through a natural language task description and a few in-context examples provided in the prompt. </p> <p>The GPT3 model <d-cite key="Brown20"></d-cite> with 175 billion parameters presented an impressive in-context learning ability that was not seen in smaller models. LLMs have also demonstrated the ability to complete new tasks by following only <em>zero-shot prompts</em>, which is purely the instructions of the task descriptions. Solving complex tasks involving multiple steps has been challenging for LLMs. By including intermediate reasoning steps, prompting strategies such as <em>chain-of-thought</em> (CoT) <d-cite key="COT22"></d-cite> have been shown to help unlock the LLM ability to tackle complex arithmetic, commonsense, and symbolic reasoning tasks.</p> <p><strong>Scaling Laws</strong>. Scaling the size of the architectures and the amount of training data has enabled unprecedented capabilities for the resulting LLMs, eliminating the need for fine-tuning on specific tasks. Scaling the size of the architectures and the amount of training data enabled unprecedented emergent capabilities for the resulting LLMs, eliminating the need for fine-tuning for specific tasks. From Kaplan’s insight <d-cite key="Kaplan20"></d-cite>, language modeling performance as a function of model size, dataset size, and amount of compute used for training, leads to the development of scaling laws, as can be seen at Figure 2.2.</p> <div class="row mt-3"> <div class="col-12 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/BT_LLM/scaling_law-480.webp 480w,/assets/img/BT_LLM/scaling_law-800.webp 800w,/assets/img/BT_LLM/scaling_law-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/BT_LLM/scaling_law.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> <strong>Figure 2.2</strong> The performance of language models is influenced by the size of the model, the extent of the dataset, and the computational resources allocated for training <d-cite key="Kaplan20"></d-cite>. </div> <p>Let $P$ denote the model size (number of parameters) and $D$ denote the dataset size (number of tokens in the corpora). According to the empirical formula <d-cite key="Doglas2023"></d-cite>, when one parameter is taken to be very large and the dependence on the other is studied, nontrivial power-law scaling can emerge. Assuming $cal(L)$ represents the test loss, the scaling law can be expressed as:</p> \[\begin{equation} \mathcal{L}(P, D)=\left[\left(\frac{P_{c}}{P}\right)^{\frac{\alpha_{P}}{\alpha_{D}}}+\left(\frac{D_{c}}{D}\right)^{\alpha_{D}}\right] \end{equation}\] <p><strong>Less But More</strong>. While the prevailing pursuit has been the ever-increasing model sizes, which leads to the growth of parameters from millions to billions and now trillions. A compelling counter-narrative is emerging. The new trend aims at reducing model size while maintaining or even enhancing language models’ performances, as exemplified by works such as ChatGLM-6B <d-cite key="GLM22"></d-cite>, Mistral-7B <d-cite key="Mixtra24"></d-cite> and TinyLlaMA-1.1B <d-cite key="Zeng24"></d-cite>. In short, contradicting the belief that “ the larger, the better”, perhaps less is but more.</p> <p>Recent studies <d-cite key="Hoffmann22,Fu24"></d-cite> suggest that we might be overestimating the optimal size of LLMs, and that for a given computational budget, relatively smaller models can achieve superior performance. The implications of this shift are significant, which may reshape the prevailing paradigm in LLMs’ development, and require more research to focus on the more nuanced and efficient model design. However, the optimal models’ scales vary when dealing with the specific tasks and computational constraints, it is still intriguing for future research to explore the novel and diminutive architectures.</p> <h1 id="3-related-works-">3. Related Works <chap3></chap3></h1> <details><summary><strong>Transformer Circuits</strong>:</summary> <p>The residual stream captures the semantic and contextual knowledge that has been distilled from the input, facilitating the model’s ability to learn and reason about complex linguistic patterns.</p> <p>According to researchers <d-cite key="Conmy23"></d-cite>, a <em>circuit</em> of transformers refers to a specific subgraph within the model’s computational graph that is both human-understandable and crucial for performing a particular function or task, driven by an analogy to electronic circuits. Further, recently researchers <d-cite key="LeeA23"></d-cite> extend the <em>multiple circuits hypothesis</em>, positing that the generative pre-trained transformer models composed of multiple such circuits, each contributing to specific aspects of functionality for language models.</p> <p>The study of transformer circuits involves analyzing how individual components, such as attention heads and feed-forward layers, interact within these circuits to perform complex tasks. In summary, the concept of transformer circuits, provides a framework for understanding the internal mechanisms of transformers.</p> </details> <details><summary><strong>Understanding Internal Representations</strong>:</summary> <p>Recent studies have focused on the inner workings of concept representation of LLMs, revealing intriguing patterns of knowledge storage inside them. In 2017, OpenAI’s discovery of the <em>sentiment neurons</em> <d-cite key="Radford17"></d-cite> marked a significant milestone in this area. These neurons were found to be highly predictive of sentiment values, with their activation responding to specific words and phrases in a obvious manner.</p> <p>Further research has led to the identification of other types of neurons, including <em>polysemantic neurons</em> <d-cite key="Olah20"></d-cite>, which respond to multiple unrelated inputs, and <em>knowledge neurons</em> <d-cite key="Dong22"></d-cite>, which store factual knowledge in a key-value memory-like fashion in BERT. Recent research <d-cite key="Marks23"></d-cite> demonstrates that LLMs learn linear representations of space and time across multiple scales, with individual <em>space neurons</em> and <em>time neurons</em> reliably encoding spatial and temporal coordinates.</p> <p>Notably, the <em>superposition hypothesis</em> <d-cite key="Bricken23"></d-cite> is proposed to explain the phenomenon of <em>polysemanticity</em>, where a neural network represents more independent <em>features</em> than neurons it has by assigning each feature to a linear combination of neurons. These findings collectively suggest that LLMs surely employ a complex, distributed architecture to store and represent knowledge, with different functional zones specializing in specific information.</p> <p>The idea that linguistic concepts are represented in a <em>vector space</em> within LLMs aligns with the <em>linear representation hypothesis</em>, where high-level concepts are represented linearly as directions in their representation space <d-cite key="Jiang24"></d-cite>. Inside the vector space representation, the inner product and other geometric notions enable LLMs to comprehend the semantical closeness and perform interventions <d-cite key="LeeA23"></d-cite>.</p> </details> <details><summary><strong>Retrieval-Augmented Generation</strong>.<d-cite key="RAG20"></d-cite>:</summary> <p>With the rapid development of LLMs, Retrieval-Augmented Generation (RAG) has become a predominant method in the field of professional knowledge-based question answering, which becomes the popular approach to equip LLM with domain knowledge. RAG framework answers a question in four steps: the user proposes a query, the system retrieves the relevant content from private knowledge bases, combines it with the user query as context, and finally asks the LLM to generate an answer. This process mirrors the typical cognitive process of encountering a problem, including consulting relevant references and subsequently deriving an answer. In this framework, the pivotal component is the accurate retrieval of pertinent information, which is critical for the efficacy of the RAG model.</p> <p>Most professional documents are mainly stored in PDFs, the low accuracy of PDF parsing significantly impacts the effectiveness of professional knowledge-based question-answering . The process of retrieval from PDF files is fraught with challenges <d-cite key="Lin24"></d-cite>, Common issues include inaccuracies in text extraction and disarray in the row-column relationships of tables inside PDF files. Since each of these steps can lead to information loss, the compounded losses can significantly impact the effectiveness of RAG’s responses.</p> </details> <details><summary><strong>Gaps in Current Research</strong>:</summary> <p>While significant advancements have been made in understanding and enhancing LLMs, several gaps remain. Current models often lack transparency, and the integration of domain-specific knowledge is still in its nascent stages. This thesis aims to address these gaps by developing a retrieval-augmented generation framework that integrates localized knowledge bases with LLMs. By doing so, it seeks to improve the interpretability and contextual relevance of LLMs, making them more reliable and effective for specialized applications.</p> </details> <h1 id="4-methodology-">4. Methodology <chap4></chap4></h1> <p>This chapter presents our proposed retrieval-augmented generation (RAG) <d-cite key="RAG20"></d-cite> framework designed to enhance the ability of large language models to enhance the accuracy, relevance, and interpretability of LLM outputs with the help of the specific domain knowledge. This approach not only improves the practical applications of LLMs in specialized domains but also contributes to the broader goal of developing AI systems that are transparent and trustworthy.</p> <h2 id="41-experimental-approach">4.1 Experimental Approach</h2> <p><strong>Retrieval-Augmented Generation</strong>. The RAG technique allows for dynamic updating and refinement of information in vector databases, rendering it exceptionally beneficial in disciplines requiring nuanced and evolving datasets such as history, medical sciences, and law. The strategic integration of LLMs with vector databases significantly augments their capabilities. This integration empowers LLMs to deliver responses that are not only accurate but also tailored to specific domains and sensitive to the temporal aspects of queries. The RAG approach underpins a novel paradigm in data retrieval and generation by combining domain-specific, timely data retrieval with contextually aware response generation.</p> <div class="fake-img l-screen"> <div class="row mt-3"> <div class="col-12 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/BT_LLM/RAG_flow.svg-480.webp 480w,/assets/img/BT_LLM/RAG_flow.svg-800.webp 800w,/assets/img/BT_LLM/RAG_flow.svg-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/BT_LLM/RAG_flow.svg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> </div> <div class="caption"> <strong>Figure 4.1 </strong> This diagram illustrates the workflow of Retrieval-Augmented Generation (RAG). RAG involves three main components: data storage, retrieval, and generation. Domain-specific knowledge is preprocessed, chunked into smaller segments, and converted into semantic vectors by an embedding model before being stored in a vector database. During retrieval, relevant segments are found via vector search and concatenated for generation. The diagram clearly shows that RAG outputs are more accurate and contextually relevant compared to the results of LLMs without RAG. </div> <p>From Fig 4.1 we can tell that the RAG framework boosts the efficacy of LLMs through two key components: retrieval and generation.</p> <ol> <li>By retrieving relevant documents from a specialized knowledge base, and secondly, by synthesizing this information into coherent, contextually enriched responses. The retrieval component, typically a sophisticated neural network, is adept at sifting through extensive databases to fetch documents that are most relevant to the input query.</li> <li>The generative component, on the other hand, seamlessly weaves this fetched information into the output generated by the LLM, thereby significantly enhancing both the accuracy and relevance of its responses. This integration allows LLMs to perform with heightened factual accuracy and situational appropriateness, particularly for queries that are domain-specific and time-sensitive.</li> </ol> <details><summary><strong>Digital Avatars</strong>:</summary> <p>The RAG approach provides a compelling framework for the establishment of specialized knowledge bases in academic settings. A notable example of this is the development of a private domain knowledge base for the National Elite Institute of Engineering (EIE) at Chongqing University. Founded in September 2022, EIE aspires to cultivate exemplary future engineers and lead innovative practices in new engineering education. The institute’s unique curriculum and research focus are not naturally embedded within the pre-existing data of LLMs, necessitating the creation of an LLM-based <em>digital avatar</em> to address this gap.</p> <p>This digital avatar is designed to field a wide array of inquiries pertaining to the institute, covering aspects such as the academic programs, faculty qualifications, enrollment processes, campus lifestyle, and extracurricular activities. To effectively fulfil this role, the digital avatar’s underlying LLM needs to be enriched with comprehensive, domain-specific information about EIE. Given the sensitive nature of some of this information, and considering future scalability and potential commercial applications, an open-source and domestic language model is preferable. Therefore, we have opted for ChatGLM3 as the operational core of our digital avatars.</p> </details> <details><summary><strong><a href="https://github.com/THUDM/ChatGLM3/blob/main/README_en.md">ChatGLM3</a></strong>:</summary> <p><a href="https://github.com/THUDM/ChatGLM3/blob/main/README_en.md">ChatGLM3</a> is a generation of pre-trained dialogue models jointly released by <a href="https://www.zhipuai.cn/">Zhipu AI</a> and <a href="https://keg.cs.tsinghua.edu.cn/">Tsinghua KEG</a>. ChatGLM3-6B is the open-source model in the ChatGLM3 series, maintaining many excellent features of the first two generations such as smooth dialogue and low deployment threshold, while introducing the following features:</p> <ul> <li> <p>Stronger Base Model: The base model of ChatGLM3-6B, ChatGLM3-6B-Base, adopts a more diverse training dataset, more sufficient training steps, and a more reasonable training strategy. Evaluations of datasets from various perspectives such as semantics, mathematics, reasoning, code, and knowledge show that ChatGLM3-6B-Base has the strongest performance among base models below 10B.</p> </li> <li> <p>More Complete Function Support: ChatGLM3-6B adopts a newly designed Prompt format, supporting multi-turn dialogues as usual. It also natively supports tool invocation (Function Call), code execution (Code Interpreter), and Agent tasks in complex scenarios.</p> </li> <li> <p>More Comprehensive Open-source Series: In addition to the dialogue model ChatGLM3-6B, the basic model ChatGLM3-6B-Base, the long-text dialogue model ChatGLM3-6B-32K and further strengthens the ability to understand long texts ChatGLM3-6B-128K have also been open-sourced. All these weights are fully open for academic research, and free commercial use is also allowed after registration via a questionnaire. and intelligent systems in the realm of artificial intelligence.</p> </li> </ul> </details> <details><summary><strong><a href="https://github.com/chatchat-space/Langchain-Chatchat">LangChain-Chatchat</a></strong>:</summary> <p>LangChain-Chatchat is an open-source project that aims to implement a knowledge and search engine-based question-answering (Q&amp;A) system using the LangChain framework and either open-source or remote LLMs’ APIs. The primary goal is to build a Q&amp;A solution that is friendly to Chinese scenarios, supports open-source models, and can run both offline and online. The key features and benefits are listed below:</p> <ul> <li> <p>localized knowledge base: LangChain-Chatchat enables the creation of a local knowledge base Q&amp;A application, ensuring data privacy and security for businesses.</p> </li> <li> <p>flexible model support: The project supports various open-source LLMs and Embedding models, such as Vicuna, Alpaca, LLaMA, Koala, and RWKV, through the integration with FastChat. It also allows the use of remote APIs like OpenAI GPT and Zhipu API.</p> </li> <li> <p>offline and online deployment: With the help of open-source LLMs and Embedding models, LangChain-Chatchat can be fully deployed offline, ensuring data privacy. It also supports online deployment through FastAPI and Streamlit WebUI.</p> </li> <li> <p>extensible architecture: The project is designed to be easily extensible, allowing for the integration of additional models and remote APIs in the future.</p> </li> <li> <p>open-source and free: LangChain-Chatchat is released under the Apache License, making it free for commercial use without any fees.</p> </li> </ul> <div class="row mt-3"> <div class="col-12 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/BT_LLM/langchain_flow-480.webp 480w,/assets/img/BT_LLM/langchain_flow-800.webp 800w,/assets/img/BT_LLM/langchain_flow-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/BT_LLM/langchain_flow.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> <strong>Figure 4.2 </strong> LangChain-Chatchat is a localized knowledge-based Q&amp;A solution that we recommend. It offers businesses a powerful and flexible approach to creating localized knowledge-based Q&amp;A systems while ensuring data security and privacy through offline deployment options. The image is sourced from https://github.com/chatchat-space/Langchain-Chatchat. </div> <p>The main process of LangChain-Chatchat as Fig 4.2 indicates:</p> <ol> <li>Loading files and reading text</li> <li>Text segmentation and vectorization</li> <li>Question vectorization</li> <li>Matching the top-k most similar text vectors to the question vector</li> <li>Adding the matched text as context to the prompt along with the question</li> <li>Submitting the prompt to the LLM to generate an answer</li> </ol> </details> <details><summary><strong>Knowledge poisoning attacks</strong>:</summary> <p>In this thesis, we also explore <em>malicious knowledge injection</em> or <em>knowledge poisoning attacks</em> <d-cite key="Geng24"></d-cite> on LLMs. We intentionally supplied ChatGLM3 with incorrect or biased information, termed <em>poisoned knowledge</em>, and observed the reactions of the language model. Knowledge poisoning attacks involve deliberately injecting harmful or misleading information into the knowledge base that an LLM relies on. This can be particularly problematic in frameworks like RAG, where the LLM retrieves and integrates information from a large database to generate responses. By contaminating this knowledge base with biased or false information, attackers can manipulate the model’s output, causing it to produce incorrect, biased, or harmful responses.</p> </details> <h2 id="42-implementation-details">4.2 Implementation Details</h2> <details><summary><strong>Data collection and preprocessing</strong>:</summary> <p>As we fully discussed before, the RAG framework can be utilized to create domain-specific knowledge bases. In this section, we begin to build the RAG-based EIE knowledge base with the help of LangChain-Chatchat, aiming to construct an enhancing tool for our digital avatar project. The LLM is enriched with information relevant to EIE, and thus we need to collect data in Markdown format to construct our corpora.</p> <p>Our curated corpus includes a brief introduction to EIE, party building work, student activities in 2024, laboratory construction, campus life, and curriculum. Although directly uploading documents when loading knowledge base files can achieve basic question answering, the effect cannot be maximized. Therefore, we performed preprocessing work on the Markdown files, which includes:</p> <ol> <li>Formatting text or PDF documents according to the Markdown format.</li> <li>Typesetting the key points of the documents in Markdown format.</li> <li>Placing duplicate content files under the same topic file to facilitate the retrieval process of RAG and increase the probability of LLMs retrieving desired answers.</li> <li>Simplifying ambiguous sentences or long, difficult sentences in the knowledge base to avoid statements that can easily cause misunderstandings by LLMs, reducing the probability of LLM answering errors due to retrieving ambiguous sentences.</li> <li>Deleting special symbols or redundant information to facilitate the text vectorization process.</li> </ol> <p>Experience has shown that the modified Markdown files have a higher recall rate and better answering effect when embedded in the LLMs’ knowledge base. The preprocessing steps ensure that the knowledge base is well-structured, concise, and free from ambiguity, thereby improving the overall performance of the RAG-based EIE knowledge base in the digital avatar project.</p> <p>By following these guidelines and leveraging the power of the RAG framework, we create a robust and efficient knowledge base that enhances the capabilities of our digital avatar.</p> </details> <details><summary><strong>Chunking strategy</strong>:</summary> <p>Chunking is a critical preprocessing step in corpora’s embedding process, where large texts are segmented into manageable pieces that better align with user queries in semantic search applications. Effective chunking ensures that each piece is semantically cohesive, minimizing dependencies on the surrounding context, which enhances the retrieval accuracy. The challenge lies in determining the optimal chunk size; too large or too small can lead to imprecise search results or missed opportunities to display relevant information. This process directly impacts the quality of information retrieval by ensuring that search results closely match the query’s intent, thus addressing user needs more precisely.</p> </details> <details><summary><strong>Vectorization and Database Indexing with Faiss</strong>:</summary> <p>After chunking, text data undergoes vectorization, converting it into numerical vector matrices. Our implementation uses FlagEmbedding <d-cite key="bge-embedding"></d-cite> to map text to low-dimensional, dense vectors suitable for retrieval, classification, and semantic search tasks. This embedding excels in matching short queries with longer documents.</p> <p>Faiss <d-cite key="Faiss"></d-cite>, developed by Facebook AI Research, efficiently handles billions of vectors, facilitating rapid retrieval in large-scale systems. Integrated into the RAG framework, Faiss enhances the model’s ability to quickly fetch and incorporate pertinent information into generated responses. This integration ensures the retrieval component supports the generative model, maximizing output accuracy and relevance.</p> <p>Vectors are indexed and stored in a vector database system tailored for RAG applications. We chose Faiss for its efficiency in similarity search and clustering of dense vectors, which is crucial for managing extensive datasets typical in applications. Faiss supports $L 2$-normalization and cosine similarities and is optimized for both CPU and GPU environments, ensuring efficient data handling. Incorporating Faiss provides advanced indexing and search capabilities, offering a robust solution for vector database management and significantly improving our RAG system’s performance.</p> </details> <details><summary><strong>Design of prompt templates</strong>:</summary> <p>The design of prompt templates is crucial in influencing the accuracy of model outputs in RAG scenarios. Effective prompts typically include task descriptions, background knowledge retrieved from databases, and specific user queries. Our experimental findings suggest that the art of prompt design is often reliant on personal experience, lacking a definitive methodological framework. Consequently, prompts require continuous optimization based on the model’s real-time outputs to enhance their effectiveness.</p> </details> <details><summary><strong>Markdown format</strong>:</summary> <p>To optimize the utilization of the comprehensive knowledge base specific to the National Elite Institute of Engineering (EIE), which includes data on academic curricula, faculty research interests, laboratory resources, and industrial partnerships, we have adopted the Markdown format. This relatively rich database not only informs the LLMs but also ensures the outputs are factually accurate and contextually relevant. Given the clarity, readability, and structural organization afforded by Markdown, it facilitates and enhances information retrieval, making it a suitable choice for formatting.</p> <p>Markdown is a lightweight markup language designed to format plain text using a simple syntax. It is widely used for creating structured documents on platforms such as GitHub, Jupyter notebooks, and various content management systems. When feeding data into our case, using markdown format provides several benefits:</p> <ul> <li> <p>structured and rich content: Markdown enables the organization of information into headings, lists, tables, and other structured elements, aiding in the preservation of context and ease of understanding. Moreover, Markdown supports basic formatting options like bold, italics, links, and code blocks, Markdown enriches the context provided to the language model.</p> </li> <li> <p>embedding links and references: The ability to embed hyperlinks, footnotes, and references in Markdown is crucial in RAG scenarios, as it allows for referencing external sources or including additional contextual details.</p> </li> <li> <p>ease of authoring: Markdown is not only human-readable but also straightforward to author, allowing content creators to efficiently produce well-structured documents without the need for complex formatting tools.</p> </li> <li> <p>chunking: In RAG systems, chunking—otherwise known as the process of breaking down extensive documents—makes the data more manageable and processable.</p> </li> </ul> </details> <details><summary><strong>Summarization</strong>:</summary> <p>In summary, the integration of localized knowledge bases with LLMs aims to address the challenges associated with the “black box” nature of these models. The primary objective of this thesis is to enhance the mechanistic interpretability of LLMs by integrating them with localized knowledge bases. The conceptual framework for this integration is rooted in the development and implementation of a RAG framework. This model leverages both the generative capabilities of LLMs and the precise information retrieval from knowledge bases to produce contextually relevant and accurate outputs.</p> </details> <h1 id="5-theoretical-analysis-">5. Theoretical Analysis <chap5></chap5></h1> <p>In this chapter, we delve into the mathematical analysis underlying transformer architectures, exploring the internal residual stream and representation space, and therefore provide a simplified mathematical summary of the intrinsic workings of LLMs.</p> <h2 id="51-mathematical-models-and-mechanistic-interpretability-">5.1 Mathematical Models and Mechanistic Interpretability <sec3.1></sec3.1></h2> <div class="l-screen"> <div class="row mt-3"> <div class="col-12 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/BT_LLM/LLM_flow.svg-480.webp 480w,/assets/img/BT_LLM/LLM_flow.svg-800.webp 800w,/assets/img/BT_LLM/LLM_flow.svg-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/BT_LLM/LLM_flow.svg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> </div> <div class="caption"> <strong>Figure 5.1 </strong> The GPT model takes as input a sequence of one-hot encoded token representations, which are then transformed through the word embedding layer. These embeddings are subsequently augmented with positional encodings to incorporate information about the token's position within the sequence. The resulting position-aware embeddings are then propagated through the transformer blocks, which constitute the core of the GPT architecture. The outputs from the transformer blocks undergo a final linear transformation, mapping them back into the vocabulary space, yielding a sequence of transformed vectors, known as <em>logits</em>. To obtain a probability distribution over the vocabulary, the final logit vector is passed through a `softmax` activation function, which produces a probability distribution over the vocabulary, indicating the likelihood of each word being the next component in the sequence. This figure is derived from and inspired by the latest research <d-cite key="Wang20,Liao24"></d-cite> </div> <p><em><strong>Mechanistic interpretability</strong></em><d-footnote>For more information, please refer to Neel Nanda's mechanistic interpretability quickstart guide, available at https://www.neelnanda.io/mechanistic-interpretability/quickstart .</d-footnote>, a subfield of explainable AI, aims to reverse-engineer model components into human-understandable algorithms, uncovering the causal processes within the LLMs that lead to its actions. Mechanistic interpretability in LLMs involves unpacking the internal processes and data flows that drive their operations. This clarity is crucial not only for trust in their applications but also for enhancing their functionality with localized knowledge integration.</p> <p>Autoregressive models predict subsequent tokens based solely on preceding ones, followed by a <em>decoder-only</em> architecture. This architecture uses the <em>self-attention</em> based mechanism, to process the input sequences through a series of multiple transformer layers, where each layer applies masked <em>multi-head</em> self-attention followed by a fully connected feed-forward network, capturing long-range dependencies and producing coherent output tokens. Readers may refer to Figure 5.1 for an illustrative and intuitive understanding.</p> <p>The internal state of the transformer, known as the <em><strong>residual stream</strong></em>, is the summation of the outputs from all preceding components <d-cite key="Elhage21"></d-cite>, including attention heads, transformer layers, and individual neurons. We now present a mathematical analysis and theoretical exploration of the internal residual stream of large language models.</p> <p>At first, we define shorthand notation \(\left\{s_{(i)}\right\}_{i=1}^{n}\) to denote sequence, and as for each \(\left\{s_{(i)}\right\}_{i=1}^{n}\) in set \(S\), we use \(S^\star := \bigcup\limits_{n \in \mathbb{N}} S^n\) to denote the set of sequences with arbitrary length \(n\in \mathbb{N}\) , and \(|S|\) as the length of the set $S$. Notice that in practical settings, though sequences can theoretically extend indefinitely, a maximum context length is imposed by computational constraints. Further, we here define mapping $\mathcal{F}^\star:S_1^\star \rightarrow S_2^\star$ to represent an entrywise function: \(\begin{equation} \mathcal{F}\left[\left\{s_{(i)}\right\}_{i=1}^{n}\right]:=\left\{\mathcal{F}\left[s_{(i)}\right]\right\}_{i=1}^{n} \label{eq:5.1} \end{equation}\)</p> <p><strong>Tokenization</strong> $\mathcal{K}$. The sequences of characters \(\left\{a_{(i)}\right\}_{i=1}^{p}\) from a given alphabet $\mathbb{A}$ form a specific word. We here define the injective mapping \(\mathcal{K}^{\star}: \mathbb{A}^{\star} \rightarrow \mathbb{T}^{\star}\), which maps the input texts to a sequence of tokens defined by \(\left\{t_{(i)}\right\}_{i=1}^{q}\), and typically \(\mathbb{T}:=\{1,2, \ldots,|\mathbb{T}|\}\). The process of tokenization encodes each subword \(a_{i}\) individually, which is then mapped as tokens and thus the input sequence henceforth segmented. For instance, the <a href="https://platform.openai.com/tokenizer">tokenizer</a> of GPT-4 splits the term “cohomology” into the subwords: “co” (prefix), “hom”, and “ology” (suffix).</p> <p>While these methods provide a convenient way to segment text, they do not capture the underlying semantic information. Popular subword tokenization methods, such as byte pair encoding <d-cite key="Sennrich16"></d-cite> and unigram language model <d-cite key="Kudo18"></d-cite>, are adaptations of data compression algorithms that rely on word character co-occurrence statistics in a given text corpora.</p> <p><strong>Embedding</strong> \(\mathcal{E}\). To enable neural networks to effectively process and learn from the complex linguistic data, token sequences \(\left\{t_{(i)}\right\}_{i=1}^{q}\) are then embedded into a high dimensional Euclidean space \(\mathbb{E}:=\mathbb{R}^{d}\) through dense vector representations. Formally, the embedding function \(\mathcal{E}:\mathbb{T} \rightarrow \mathbb{E}\) maps each token \(t_{(i)}\) from the token vocabulary \(\mathbb{T}\) to a $d$-dimensional dense vector \(\boldsymbol{e}_{(j)}\), such that the norm of \(\left\|\mathcal{E}\left(t_{\alpha}\right)-\mathcal{E}\left(t_{\beta}\right)\right\|\) corresponds to the linguistic similarity of the subwords represented by the tokens \(t_{\alpha}\) and \(t_{\beta}\).</p> <p>These embedded vectors \(\left\{\boldsymbol{e}_{(j)}\right\}_{j=1}^{r}\) are stored in a matrix \(\boldsymbol{E}\), which \(\in \mathbb{R}^{\|\mathbb{T}\| \times d}\), where each row represents the embedding of a specific token. The most famous example <d-cite key="CohnT15"></d-cite> is listed below; one can read Section 5.2 for more analysis :</p> \[\begin{equation} \tilde{\mathcal{E}}(\text { 'king' })-\tilde{\mathcal{E}}(\text { 'queen' }) \approx \tilde{\mathcal{E}}(\text { 'man' })-\tilde{\mathcal{E}}(\text { 'woman' }) \label{eq:5.2} \end{equation}\] <p>The goal of embedding is to represent linguistic similarity between subwords through the distance between their corresponding embedding vectors, and Euclidean space makes it compatible with a wide range of linear algebraic operations. This approach, as opposed to one-hot encoding, where each word would be represented as a sparse vector of size \(\|\mathbb{T}\|\) with all zeros except for one element, results in capable of representing the various aspects of word relationships, both monolingual <d-cite key="Mikolov2013,Kocmi2017"></d-cite> and bilingual <d-cite key="Luong2015,Wang2019"></d-cite>.</p> <p><strong>Positional Encoding</strong> \(\mathcal{P}\). Since the embeddings \(\mathcal{E}\left(t_{(i)}\right)\) do not contain any positional information, one can typically add positional encodings, which is the map \(\mathcal{P}^{\star}: \mathbb{E}^{\star} \rightarrow \mathbb{E}^{\star}\). In the absolute position encoding setting, the commonly used form is the addition:</p> \[\begin{equation} \mathcal{P}^{\star}\left(\left\{\boldsymbol{e}_{(j)}\right\}_{j=1}^{r}\right):=\left\{\boldsymbol{e}_{(j)}+\boldsymbol{p}_{(j)}\right\}_{j=1}^{r} \end{equation}\] <p>where \(p: \mathbb{N} \rightarrow \mathbb{E}\) is an injective function. In the learned variant of absolute position encoding, \(\boldsymbol{p}_{(j)}\) is learned during training. In the sinusoidal variant, denote \(\left(\boldsymbol{p}_{(j)}\right)\) as the $s$-th component of the vector, then \(\boldsymbol{p}_{(j)}\) is commonly computed as:</p> \[\begin{equation} \left(\boldsymbol{p}_{(j)}\right)_{s}= \begin{cases}\sin \left(\frac{j}{M^{\frac{s}{d}}}\right) \quad s=2 k \\ \cos \left(\frac{j}{M^{\frac{s-1}{d}}}\right) \quad s=2 k-1\end{cases} \end{equation}\] <p>where \(s \in [0,d-2]\), and \(M=10^4\) are fixed <d-cite key="Vaswani17"></d-cite>. However, in the latest research <d-cite key="Haviv22,Reddy2023"></d-cite>, explicit position encodings are not essential for decoder-only transformers to generalize well to longer sequences, since they can learn positional information implicitly. However, for masked language modeling transformers like BERT, explicit position encodings are necessary for effective generalization.</p> <p>So far, the text \(\left\{a_{(i)}\right\}_{i=1}^{p}\in \mathbb{A}^{\star}\) has been transformed into a sequence of embeddings through three steps: tokenization \(\mathcal{K}\), embedding \(\mathcal{E}\), and positional encoding \(\mathcal{P}\) :</p> \[\begin{equation} \boldsymbol{x}:=\left(\mathcal{P}^{\star} \circ \mathcal{E}^{\star} \circ \mathcal{K}^{\star}\right)\left(\left\{a_{(i)}\right\}_{i=1}^{p}\right)=\left\{\boldsymbol{e}_{(j)}+\boldsymbol{p}_{(j)}\right\}_{j=1}^{r} \end{equation}\] <p>where \(\boldsymbol{x} \in \mathbb{E}^{\star}\), and the length of which depends on both the tokenization algorithm and the choice of text.</p> <p><strong>Transformer</strong> \(\mathcal{T}\). The transformer can be represented as a neural network \(\mathcal{T}^{\star}: \mathbb{E}^{\star} \rightarrow \mathbb{E}^{\star}\), which maps a sequence of embeddings \(\left\{\boldsymbol{x}_{(t)}\right\}_{t=1}^{n}\) to another equal-length sequence, preserving the contextual information. For autoregressive tasks, the model is designed to ensure that each element of its output, e.g. $i$-th element of \(\mathcal{T}\left(\left\{\boldsymbol{x}_{(t)}\right\}_{t&gt;i=1}^{n}\right)\), depends only on the previous embedded tokens \(\left\{\boldsymbol{x}_{(t)}\right\}_{t=1}^{t \leq i}\) and is independent of \(\left\{\boldsymbol{x}_{(t)}\right\}_{t=1}^{t \geq 1}\), which creates the masked structure that produces one-way information flow.</p> <p>The transformer is typically defined by a composition of \(L \in \mathbb{N}\) residual blocks, consisting of self-attention mapping \(\mathcal{A}^{(l)}\), entrywise applied normalizing layers \(\mathcal{N}_{\mathcal{A}}^{(l)}, \mathcal{N}_{\mathcal{M}}^{(l)}\), and multiplayer perceptrons (MLP) layer \(\mathcal{M}^{(l)}\) :</p> \[\begin{equation} \displaylines{ \mathcal{T}^{\star}:=\left[\left(I+\mathcal{M}^{(l) \star} \circ \mathcal{N}_{\mathcal{M}}^{(l) \star}\right) \circ\left(I+\mathcal{A}^{(l)} \circ \mathcal{N}_{\mathcal{A}}^{(l) \star}\right)\right] \circ \dots \\ \circ\left[\left(I+\mathcal{M}^{(2) \star} \circ \mathcal{N}_{\mathcal{M}}^{(2) \star}\right) \circ\left(I+\mathcal{A}^{(2)} \circ \mathcal{N}_{\mathcal{A}}^{(2) \star}\right)\right] \circ\left[\left(I+\mathcal{M}^{(1) \star} \circ \mathcal{N}_{\mathcal{M}}^{(1) \star}\right) \circ\left(I+\mathcal{A}^{(1)} \circ \mathcal{N}_{\mathcal{A}}^{(1) \star}\right)\right] } \label{eq:5.6} \end{equation}\] <p>where \(I\) denotes the identity mapping, inspired by <em>residual neural networks</em> (ResNet) <d-cite key="He2015"></d-cite>’s unique <em>residual connection</em> design, \(l \in [0,L]\) denotes the specific $l$-th layer, and the addition here is an entrywise function.The upper indices of the layers $\mathcal{N}^{(l)}, \mathcal{M}^{(l)}, \mathcal{A}^{(l)}$ signify the use of distinct trainable parameters within each layer.</p> <p><strong>Transformer: Layer Normalization</strong> \(\mathcal{N}\). The normalizing layer can be interpreted as a re-parametrization with a learnable mean and standard deviation to stabilize training. In its original formulation <d-cite key="Ba2016"></d-cite>, \(\mathcal{N}: \mathbb{E} \rightarrow \mathbb{E}\) is introduced in terms of the mean $\mu$ and standard deviation $\sigma$ of an input feature vector $\boldsymbol{x} \in \mathbb{E}$ and denote its $i$-th component $x_{i}$, then :</p> \[\begin{equation} \displaylines{ \mathcal{N}(\boldsymbol{x})=\frac{\boldsymbol{x}-\mu}{\sigma} \\ \text { where } \mu=\frac{1}{d} \sum_{i}^{d} x_{i} \text { and } \sigma=\sqrt{\frac{1}{d} \sum_{i=1}^{d}\left(x_{i}-\mu^{2}\right)} } \label{eq:5.7} \end{equation}\] <p>Recently works <d-cite key="Brody2023,Molina23"></d-cite> notice that vector \((\boldsymbol{x}-\boldsymbol{\mu})\) is proved to be orthogonal to the \(\overrightarrow{\boldsymbol{1}}\), where \(\boldsymbol{\mu}= [\mu, \ldots, \mu], \overrightarrow{\mathbf{1}}=[1, \ldots, 1]\) and \(\boldsymbol{\mu}, \overrightarrow{\mathbf{1}} \in \mathbb{E}\). Moreover, we can henceforth derive the projection of \(\boldsymbol{x}\) onto the hyperplane \(\mathcal{H}\) defined by \(\frac{1}{\sqrt{d}} \overrightarrow{\mathbf{1}}\) :</p> \[\begin{equation} \displaylines{ \operatorname{proj}_{\mathcal{H}}(\boldsymbol{x})= &amp; \boldsymbol{x}-\operatorname{proj}_{\mathcal{H}}\left(\boldsymbol{x}, \frac{1}{\sqrt{d}} \overrightarrow{\mathbf{1}}\right) \\ = &amp; \boldsymbol{x}-\frac{\boldsymbol{x} \cdot \overrightarrow{\mathbf{1}}}{d} \cdot \overrightarrow{\mathbf{1}}=\boldsymbol{x}-\boldsymbol{\mu} } \label{eq:5.8} \end{equation}\] <p>and thus, combine the result of Equation \eqref{eq:5.7} and Equation \eqref{eq:5.8} , we can reformulate layer normalization \(\mathcal{N}\) as :</p> \[\begin{equation} \displaylines{ &amp; \mathcal{N}(\boldsymbol{x})=\frac{\gamma(\boldsymbol{x}-\boldsymbol{\mu})}{\boldsymbol{\sigma}}+\beta=\gamma \cdot \frac{\boldsymbol{x}-\boldsymbol{\mu}}{\sqrt{\frac{1}{d}} \sqrt{\sum_{i=1}^{d}\left(x_{i}-\mu\right)^{2}}}+\beta \\ &amp; =\gamma \cdot \frac{\boldsymbol{x}-\boldsymbol{\mu}}{\left(\frac{1}{\sqrt{d}}\right)\|\boldsymbol{x}-\boldsymbol{\mu}\|_{2}}+\beta=\gamma \cdot \frac{\sqrt{d} \cdot \operatorname{proj}_{\mathcal{H}}(\boldsymbol{x})}{\left\|\operatorname{proj}_{\mathcal{H}}(\boldsymbol{x})\right\|_{2}}+\beta } \label{eq:5.9} \end{equation}\] <p>where \(\gamma, \beta \in \mathbb{E}\) are defined as the gain and bias learnable parameters. From a geometric viewpoint, layer normalization \(\mathcal{N}\) projects \(\boldsymbol{x} \in \mathbb{E}\) onto the hyperplane \(\mathcal{H}\) perpendicular to \(\overrightarrow{\mathbf{1}}\), and normalizes the projection such that it lies on the surface of the hyper-sphere \(\mathbb{S}^{d-1}\) of radius \(\sqrt{d}\). Also, considering the property of transformer-based architectures, all intermediate layers project onto the same hyper-sphere \(\mathbb{S}^{d-1}\). The parameter \(\gamma\) scales each coordinate axis of \(\mathbb{E}\) independently, transforming the hyper-sphere \(\mathbb{S}^{d-1}\) into a hyper-ellipsoid, and the bias term \(\beta\) shifts the center of the hyper-ellipsoid from the origin.</p> <p>Moreover, according to the latest work <d-cite key="Brody2023"></d-cite>, both the projection and scaling procedures of \(\mathcal{N}\) enhance the expressivity of the subsequent multi-head attention layer. By applying the projection operation \(\operatorname{proj}_{\mathcal{H}}(\boldsymbol{x})\), transformers enable the attention mechanism to create an attention query that attends to all keys equally, simplifying the learning process for the attention mechanism. The scaling procedure allows each key to potentially receive the highest attention, avoiding situations where certain keys may become unselectable.</p> <p><strong>Transformer: Multilayer Percpetrons</strong> \(\mathcal{M}\). The MLP layer is a standard feed-forward neural network consisting of compositions of affine mappings \({ }_{m}^{n} \mathcal{L}^{(l)}: \mathbb{R}^{m} \rightarrow \mathbb{R}^{n}\) and Lipschitz functions \(\sigma(\cdot): \mathbb{R} \rightarrow \mathbb{R}\). We first define the affine mapping \({ }_{m}^{n} \mathcal{L}^{(l)}(t):=\boldsymbol{W}^{(l)} t+b^{(l)}\), where the weight matrix \(\boldsymbol{W}^{(l)} \in \mathbb{R}^{n \times m}\) and the bias vector \(b^{(l)} \in \mathbb{R}^{n}\). A typical MLP \(\mathcal{M}: \mathbb{E} \rightarrow \mathbb{E}\) used in transformers is then:</p> \[\begin{equation} \mathcal{M}:={ }_{d^{\prime}}^{d} \mathcal{L}^{(l)} \circ \sigma \circ{ }_{d}^{d^{\prime}} \mathcal{L}^{(l)} \end{equation}\] <p>where $d^{\prime} \in \mathbb{N}$, usually $d^{\prime}&gt;d$, and $l$ here indicates layer number. Typically, one considers ReLU, GELU, or sigmoid for the choice of activation function \(\sigma\) <d-cite key="Nwankpa2018"></d-cite> flexibly. The parameters of MLP are learnt using gradient-based optimization algorithms with the gradients being computed via back-propagation.</p> <p><strong>Transformer: Self-attention</strong> \(\mathcal{A}\). As shown in Equation \eqref{eq:5.6}, the self-attention layer \(\mathcal{A}: \mathbb{E}^{\star} \rightarrow \mathbb{E}^{\star}\) is the only layer that combines embeddings of different tokens, which means \(\mathcal{A}\) attends to other tokens. Recall that we use \(\left\{\boldsymbol{x}_{(j)}\right\}_{j=1}^{n}\) to denote the given input sequence of length $n$, then the self-attention mechanism is defined as follows:</p> \[\begin{equation} \mathcal{A}\left(\boldsymbol{X}, \boldsymbol{W}_{Q}, \boldsymbol{W}_{K}, \boldsymbol{W}_{V}\right):=\operatorname{softmax}\left(\frac{\boldsymbol{Q} \boldsymbol{K}^{T}}{\sqrt{d}}\right) \boldsymbol{V} \label{eq:5.11} \end{equation}\] <p>where \(\boldsymbol{X}=\left\{\boldsymbol{x}_{(j)}\right\}_{j=1}^{n} \in \mathbb{R}^{d \times n}\) for conciseness, and</p> \[\begin{equation} \boldsymbol{Q}:=\boldsymbol{X}^{T} \boldsymbol{W}_{Q} \quad \boldsymbol{K}:=\boldsymbol{X}^{T} \boldsymbol{W}_{K} \quad \boldsymbol{V}:=\boldsymbol{X}^{T} \boldsymbol{W}_{V} \label{eq:5.12} \end{equation}\] <p>To normalize the probabilities, we here introduce the softmax function softmax : $\mathbb{R}^{\star} \rightarrow[0,1]^{\star}$ denoted as:</p> \[\begin{equation} \operatorname{softmax}\left(\boldsymbol{x}_{(i)}\right):=\frac{\exp \left(\boldsymbol{x}_{(i)}\right)}{\sum_{j=1}^{n} \exp \left(\boldsymbol{x}_{(j)}\right)} \label{eq:5.13} \end{equation}\] <p>Here, \(\boldsymbol{W}_{Q}, \boldsymbol{W}_{K} \in \mathbb{R}^{d \times k}\) and \(\boldsymbol{W}_{V} \in \mathbb{R}^{d \times v}\) are projection matrices from \(\mathbb{R}^{d}\) to an intermediate dimension \(\mathbb{R}^{k}\) and value dimension \(\mathbb{R}^{v}\). Notices that for the settings of multi-head attention, the projection matrices can be written as \(\boldsymbol{W}_{Q}^{(i)}, \boldsymbol{W}_{K}^{(i)}, \boldsymbol{W}_{V}^{(i)}\), where \(i \in[1, \ldots, h]\) and $h$ is the number of heads. According to the original design of transformers <d-cite key="Vaswani17"></d-cite>, the value dimension $v$ is commonly equal to $k$, and an extra projection matrix \(\boldsymbol{W}_{O} \in \mathbb{R}^{h k \times d}\) is introduced to combine information from all heads. Multi-head attention enables the model to simultaneously capture information from diverse representation subspaces across different positions, facilitating a more nuanced understanding of inputs. We therefore derive the mechanism of multi-head self-attention as:</p> \[\begin{equation} \displaylines{ \operatorname{Head}_{i}:=\mathcal{A}\left(\boldsymbol{X}, \boldsymbol{W}_{Q}^{(i)}, \boldsymbol{W}_{K}^{(i)}, \boldsymbol{W}_{V}^{(i)}\right) \\ \operatorname{MultiHead}(\boldsymbol{X}):=\sum_{i=1}^{h} \operatorname{head}_{i} \boldsymbol{W}_{O}^{i}=\sum_{i=1}^{h} \mathcal{A}\left(\boldsymbol{X}, \boldsymbol{W}_{Q}^{(i)}, \boldsymbol{W}_{K}^{(i)}, \boldsymbol{W}_{V}^{(i)}\right) \boldsymbol{W}_{O}^{i} } \label{eq:5.14} \end{equation}\] <p>where \(\boldsymbol{W}_{O}^{(i)} \in \mathbb{R}^{k \times d}\) denotes an element of the partition of matrix \(\boldsymbol{W}_{O} \in \mathbb{R}^{h k \times d}\) alongside the row dimension. By combining the Equation \eqref{eq:5.11} to Equation \eqref{eq:5.14} , we can derive a simple form notation:</p> \[\begin{equation} \displaylines{ \operatorname{MultiHead}(\boldsymbol{X})=\sum_{i=1}^{h} \operatorname{softmax}\left(\frac{\boldsymbol{X}^{T} \boldsymbol{W}_{Q}^{(i)} \boldsymbol{W}_{K}^{(i) T} \boldsymbol{X}}{\sqrt{d}}\right) \boldsymbol{X}^{T} \boldsymbol{W}_{V}^{(i)} \boldsymbol{W}_{O}^{(i)} \\ =\sum_{i=1}^{h} \operatorname{softmax}\left(\frac{\boldsymbol{X}^{T} \boldsymbol{W}_{Q K}^{(i)} \boldsymbol{X}}{\sqrt{d}}\right) \boldsymbol{X}^{T} \boldsymbol{W}_{V O}^{(i)} } \label{eq:5.15} \end{equation}\] <p>where \(\boldsymbol{W}_{Q K}^{(i)}=\boldsymbol{W}_{Q}^{(i)} \boldsymbol{W}_{K}^{(i) T}, \boldsymbol{W}_{V O}^{(i)}=\boldsymbol{V}_{Q}^{(i)} \boldsymbol{W}_{O}^{(i)}\), and \(\boldsymbol{W}_{Q K}^{(i)}, \boldsymbol{W}_{V O}^{(i)} \in \mathbb{R}^{d \times d}\) are both low-rank virtual matrices as previous works shown <d-cite key="Dar2022,Elhage21"></d-cite>.</p> <p>On a high level, the term $\left(\frac{Q K^{T}}{\sqrt{d}}\right)$ can be interpreted as measuring the similarities between the embeddings of the $i$-th query and the $j$-th key across all tokens. Consequently, softmax mapping softmax $\left(\frac{Q K^{T}}{\sqrt{d}}\right)$ can be understood as representing the probabilities distribution that the $i$-th query will attend to or focus on the $j$-th key.</p> <p>The scaling factor $\frac{1}{\sqrt{d}}$ is introduced to mitigate the effect of large magnitudes in the dot products, which can cause the softmax function to generate extreme probabilities when $d$ is high. By scaling the dot products by $\frac{1}{\sqrt{d}}$, the self-attention mechanism becomes more stable and less sensitive to the embedding dimensionality.</p> <p>In summary, the self-attention mechanism allows the model to dynamically focus on different parts of the input sequence, emphasizing the most relevant information for predicting subsequent elements.</p> <p><strong>Prediction Head</strong> \(\mathcal{H}\). The prediction head or un-embedding layer can be represented as the mapping \(\mathcal{H}: \mathbb{E}^{\star} \rightarrow \Delta^{\gamma}\), where</p> \[\begin{equation} \Delta^{\gamma}:=\left\{\boldsymbol{u} \in[0,1]^{\gamma} \mid \sum_{i=1}^{\gamma}\left\|\boldsymbol{u}_{i}\right\|=1\right\} \label{eq:5.16} \end{equation}\] <p>denotes the probability simplex in \(\mathbb{R}^{\gamma}\), which is a geometric representation of all possible distributions of probabilities across $\gamma$ different outputs. The prediction head maps the sequence of transformed embeddings \(\boldsymbol{Y}:=\mathcal{T}(\boldsymbol{X})\) to a vector \(\boldsymbol{u} \in \Delta^{\gamma}\), where \(\boldsymbol{u}_{i}\) denotes the probability of predicting the next token \(t_{(q+1)} \in \mathbb{T}\). As the transformed embedding of the last tokens, e.g. \(\boldsymbol{y}_{n+1}\), contains information about the entire input sequence \(\left\{\boldsymbol{x}_{(t)}\right\}_{i=1}^{n}\), a straightforward approach is to use a linear mapping followed by softmax layer to ensure \(\boldsymbol{u}\) lies inside \(\Delta^{\gamma}\) :</p> \[\begin{equation} \boldsymbol{u}:=\left(\operatorname{softmax} \circ_{d}^{\gamma} \mathcal{L}\right)\left(\boldsymbol{y}_{(n+1)}\right) \label{5.17} \end{equation}\] <p><strong>Sampling</strong> $\mathcal{S}$. Sampling methods $\mathcal{S}: \Delta^{\gamma} \rightarrow \mathbb{T}$ are the decoding strategies for language models to generate coherent, diverse, and contextually relevant texts, which determine how the final prediction for the next token $t_{(q+1)} \in \mathbb{T}$ is selected by sampling from the probability distribution over all possible tokens. Choosing the appropriate sampling method helps to decrease the occurrence of text degeneration, which implies the production of repetitive, incoherent, or generic texts <d-cite key="ChoiY2019"></d-cite>.</p> <p>Several methods are commonly used in text generation, including beam search, top- $k$ sampling, and nucleus sampling <d-cite key="ChoiY2019"></d-cite>. The simplest option is greedy sampling, which always selects the token with the highest probability as the next token.</p> \[\begin{equation} \mathcal{S}(\boldsymbol{Y})=t_{(q+1)}:=\underset{i=1, \ldots, \gamma}{\operatorname{argmax}}\left(\left\|\boldsymbol{u}_{i}\right\|\right) \end{equation}\] <p>To sum up, the aforementioned operations can be iteratively applied to the augmented token sequence \(\left\{t_{(i)}\right\}_{i=1}^{q+1}\) repeatedly, thereby generating successive token \(t_{(q+2)}\) until the stopping criterion is finally satisfied:</p> \[\begin{equation} t_{(q+2)}:=\left(\mathcal{S} \circ \mathcal{H} \circ \mathcal{T}^{\star} \circ \mathcal{P}^{\star} \circ \mathcal{E}^{\star}\right)\left(\left\{t_{(i)}\right\}_{i=1}^{q+1}\right) \end{equation}\] <p>In summary, tokens are first embedded as particles in $\mathbb{R}^{d}$ and then projected onto the hypersphere $\mathbb{S}^{d-1}$, travelling around its surface, thus completing a “walk of sentences” in response to the initial input of LLMs. The trajectory of the particle flow is determined by each layer of the transformer, which continually transforms “meanings” of particles. Meanwhile, the cumulative residual stream encodes information that has been progressively accumulated and transformed throughout the various blocks of the transformer’s architecture as the “communication channels” <d-cite key="Elhage21"></d-cite>.</p> <h2 id="52-concepts-representation-within-llms-">5.2 Concepts Representation within LLMs <sec5.2></sec5.2></h2> <p>LLMs demonstrate a remarkable ability to answer questions and understand the underlying semantic intentions, which then raises questions about how knowledge are stored inside LLMs. Can we draw parallels between the memory circuits of the human brain with LLMs? Or, do LLMs mimic the functionality of biological neurons to store information?</p> <p><strong>Linear Concept Representation</strong>. We propose a mathematical language to formalize the inner workings of semantical knowledge storage of LLMs. Continuing along the perspective of Equation \eqref{eq:5.2}, we further investigate the hypothesis that linguistic concepts are represented in the internal vector space within LLMs.</p> <p>Let $\mathbb{V}=\mathbb{R}^{d}$ denote the vector space that concepts are embedded into. We define the set of output words from LLMs as $\mathbb{W}=\left{w_{1}, w_{2}, \ldots, w_{n}\right}$, where each $w_{i}$ is a word from the dictionary $\mathbb{W}$. We denote the extended version of embedding mapping $\tilde{\mathcal{E}}: \mathbb{V} \rightarrow \mathbb{W}$ and un-embedding mapping $\tilde{\mathcal{E}}^{-1}: \mathbb{W} \rightarrow \mathbb{V}$ as follows:</p> \[\begin{equation} \displaylines{ &amp; \tilde{\mathcal{E}}\left(w_{i}\right):=(\mathcal{T} \circ \mathcal{P} \circ \mathcal{E} \circ \mathcal{K})\left(w_{i}\right) \\ &amp; \tilde{\mathcal{E}}^{-1}\left(\tilde{\mathcal{E}}\left(w_{i}\right)\right):=(\mathcal{S} \circ \mathcal{H})\left(\tilde{\mathcal{E}}\left(w_{i}\right)\right) } \label{5.20} \end{equation}\] <p>and it is trivial to show that:</p> \[\begin{equation} \displaylines{ \tilde{\mathcal{E}}\left(\text { ' word' }\right)=\left(\mathcal{T}^{\star} \circ \mathcal{P}^{\star} \circ \mathcal{E}^{\star} \circ \mathcal{K}^{\star}\right)(\text { 'word' }) \in \mathbb{V} \\ \left(\tilde{\mathcal{E}}^{-1} \circ \tilde{\mathcal{E}}\right)(\text { 'word' })=\text { 'word' }^{\mathbb{W}} } \end{equation}\] <p>For simplicity, we restrict focus on binary concepts, which are the vectors composed of their corresponding counterfactual parts. We denote the counterfactual parts as \(\delta_{+}\) or \(\delta_{-}\), where e.g. \(\delta_{+} \in \text\{ 'man', 'king', 'actor', \ldots \} \subset \mathbb{W}\) and \(\delta_{-} \in\text\{ 'woman', 'queen', 'actress', \ldots\} \subset \mathbb{W}\). The positive span <d-footnote>The term "positive" here only signifies the "direction" of the concept vectors. Similarly, the negative span of a binary concept vector can be defined as: $$\operatorname{span}^{-}\left(\vec{b}_{i}\right):=\left\{\mu \vec{b}_{i} \in \mathbb{V} \mid \mu \leqslant 0\right\}$$</d-footnote> of a binary concept vector \(\vec{b}_{i}\) is defined as:</p> \[\begin{equation} \operatorname{span}^{+}\left(\vec{b}_{i}\right):=\left\{\lambda \vec{b}_{i} \in \mathbb{V} \mid \lambda \geqslant 0\right\} \end{equation}\] <p>We then say binary concept vectors \(\vec{b}_{i}, \vec{b}_{j} \in \mathbb{V}\) are linearly separable if and only if their counterfactual parts \(\delta_{+}^{(i)}, \delta_{-}^{(i)}, \delta_{+}^{(j)}, \delta_{-}^{(j)}\) belong to the same separable category. The binary concept vector \(\vec{b}_{i}\) is then defined as the difference between the extended embeddings of its counterfactual parts:</p> \[\begin{equation} \tilde{\mathcal{E}}\left(\delta_{+}^{(i)}\right)-\tilde{\mathcal{E}}\left(\delta_{-}^{(i)}\right) \in \operatorname{span}^{+}\left(\vec{b}_{i}\right) \label{eq:5.23} \end{equation}\] <p>Thus Equation \eqref{eq:5.2} can be re-interpreted as the expression of linearly separable binary concept (here means “gender”):</p> \[\begin{equation} \tilde{\mathcal{E}}\left(\delta_{+}^{\text {(gender) }}\right)-\tilde{\mathcal{E}}\left(\delta_{-}^{(\text {gender) }}\right) \in \operatorname{span}^{+}\left(\vec{b}_{(\text {gender })}\right) \label{eq:5.24} \end{equation}\] <p><strong>Linearity</strong>. As we have shown in Equation \eqref{eq:5.16} and Equation \eqref{eq:5.17}, LLMs produce the probability distribution over different outputs, which is proportional to the softmax of attention scores. LLMs digest context text \(w_j\), then sample the output text \(w_i\) by the mechanism of softmax:</p> \[\begin{equation} \displaylines{ P\left(w_{i} \mid w_{j}\right) &amp; :=\operatorname{softmax}\left(\left\langle\tilde{\mathcal{E}}\left(w_{j}\right), \tilde{\mathcal{E}}\left(w_{i}\right)\right\rangle\right) \\ &amp; =\frac{e^{\left\langle\tilde{\varepsilon}\left(w_{j}\right), \tilde{\mathcal{E}}\left(w_{i}\right)\right\rangle}}{\sum\limits_{k=1}^{|\mathbb{W}|} e^{\left\langle\tilde{\mathcal{E}}\left(w_{j}\right), \tilde{\mathcal{\varepsilon}}\left(w_{k}\right)\right\rangle}} } \label{eq:5.25} \end{equation}\] <p>Before we draw the conclusion of linearity, we first need to define an inner product on \(\mathbb{V}\) to measure the similarity or projection between vectors in the representation space. Let \(\boldsymbol{B} \in \mathbb{R}^{d \times d}\) be a symmetric positive definite matrix, and define the inner product \(\langle\cdot, \cdot\rangle_{B}: \mathbb{V} \times \mathbb{V} \rightarrow \mathbb{R}\) as follows:</p> <p>Notices that the inner product, induced by matrix \(\boldsymbol{B}\), should satisfy the following properties for \(\vec{b}_{i}, \vec{b}_{j} \in \mathbb{V}, \alpha \in \mathbb{R}\):</p> \[\begin{equation} \left\{\begin{array}{l} \left\langle\vec{b}_{i}, \vec{b}_{j}\right\rangle_{B}=\left\langle\vec{b}_{j}, \vec{b}_{i}\right\rangle_{B} \tag{5.26}\\ \left\langle\alpha \vec{b}_{i}, \vec{b}_{j}\right\rangle_{B}=\alpha\left\langle\vec{b}_{i}, \vec{b}_{j}\right\rangle_{B} \\ \left\langle\vec{b}_{i}+\vec{b}_{k}, \vec{b}_{j}\right\rangle_{B}=\left\langle\vec{b}_{i}, \vec{b}_{j}\right\rangle_{B}+\left\langle\vec{b}_{k}, \vec{b}_{j}\right\rangle_{B} \\ \left\langle\vec{b}_{j}, \vec{b}_{j}\right\rangle_{B}&gt;0, \text { for all } \vec{b}_{j} \in \mathbb{V} \backslash\{0\} \end{array}\right. \label{eq:5.26} \end{equation}\] <p>As we have the notion of inner product, considering \(w_{i} \in\left\{\delta_{+}^{(k)}, \delta_{-}^{(k)}\right\}$, e.g. $w_{i}=\delta_{+}^{(k)}\), then \(w_{i}\) implies the existence of binary vector \(\vec{b}_{k}\), which shares a logit-linear probability of occurrence:</p> \[\begin{equation} \displaylines{ \operatorname{logit}\left[P\left(\delta_{+}^{(k)} \mid w_{j}\right)\right]=\ln \left[\frac{P\left(\delta_{+}^{(k)} \mid w_{j}\right)}{1-P\left(\delta_{+}^{(k)} \mid w_{j}\right)}\right]=\ln \left[\frac{e^{\left\langle\tilde{\mathcal{E}}\left(w_{j}\right), \tilde{\mathcal{E}}\left(\delta_{+}^{(k)}\right)\right\rangle_{B}}}{e^{\left\langle\tilde{\mathcal{E}}\left(w_{j}\right), \tilde{\mathcal{E}}\left(\delta_{-}^{(k)}\right)\right\rangle_{B}}}\right] \\ =\tilde{\mathcal{E}}\left(w_{j}\right)^{T} \boldsymbol{B} \tilde{\mathcal{E}}\left(\delta_{+}^{(k)}\right)-\tilde{\mathcal{E}}\left(w_{j}\right)^{T} \boldsymbol{B} \tilde{\mathcal{E}}\left(\delta_{-}^{(k)}\right) \\ =\tilde{\mathcal{E}}\left(w_{j}\right)^{T} \boldsymbol{B}\left(\tilde{\mathcal{E}}\left(\delta_{+}^{(k)}\right)-\tilde{\mathcal{E}}\left(\delta_{-}^{(k)}\right)\right)=\left(\lambda \tilde{\mathcal{E}}\left(w_{j}\right)^{T} \boldsymbol{B}\right) \overrightarrow{b_{k}} } \label{eq:5.27} \end{equation}\] <p>where \(\lambda \in \mathbb{R}\), and \(\tilde{\mathcal{E}}\left(w_{j}\right)^{T} \boldsymbol{B}\) is a coefficient item. Then the probability of the output is logitlinear in the language model subspace representation.</p> <p><strong>Limitations of Linearity</strong>. While the linearized representation allows LLMs to exploit linear relationships between linguistic concepts and uncover underlying semantic structures, it is essential to acknowledge the limitations of the linearity hypothesis. Considering the complexity essence of language, to further explore these nonlinear aspects, we propose viewing the semantic space as a manifold \(\mathcal{W}\) equipped with a Riemannian metric \(\boldsymbol{g}\). We believe this perspective will open up new ideas for investigating the geometric properties of language.</p> <ul> <li> <p>The inner product of vectors, defined as \(\left\langle\tilde{\mathcal{E}}\left(w_{i}\right), \tilde{\mathcal{E}}\left(w_{j}\right)\right\rangle\), can represent the semantic similarity between two words \(w_{i}\) and \(w_{j}\).</p> </li> <li> <p>The outer product of vectors, given by \(\tilde{\mathcal{E}}\left(w_{i}\right) \otimes \tilde{\mathcal{E}}\left(w_{j}\right)\), can capture the combination of the semantics of two words, which is a potential “meaning-blending” mechanism.</p> </li> <li> <p>Linear combinations of vectors, such as \(t \tilde{\mathcal{E}}\left(w_{i}\right)+(1-t) \tilde{\mathcal{E}}\left(w_{j}\right)\) where \(t \in[0,1]\), can represent the interpolation of word meanings or even “semantic gradients”.</p> </li> <li> <p>Linear transformations applied to vectors, denoted as \(\boldsymbol{A} \tilde{\mathcal{E}}\left(w_{i}\right)\) where \(\boldsymbol{A}\) is denotes the linear transformation matrix, can model the “semantic rotation” or “dimensionality projection”, potentially inspiring applications in sentiment analysis and related fields.</p> </li> <li> <p>Geodesics, which are the shortest paths between points on the manifold \(\mathcal{W}\), can be employed to explore the continuity and smoothness of language. These geodesics reflect the properties of a word’s local neighborhood on its tangent space, providing insights into the local structure of the semantic space.</p> </li> </ul> <p>In short, the framework of internal representation of information demonstrates the model’s capability to accurately comprehend complex semantic information. And the vector space modeling of linguistic concepts within LLMs underpins their ability to capture and process the semantic information present in human language.</p> <h2 id="53-integration-with-localized-knowledge-bases">5.3 Integration with Localized Knowledge Bases</h2> <p>The integration of localized knowledge bases with LLMs is formalized through the retrieval-augmented generation framework, and is crucial for enhancing their interpretability. This approach significantly enhances the model’s capability to produce accurate and contextually relevant outputs.</p> <p>Detailed mathematical modeling of the retrieval processes used in RAG, which involve nearest neighbor searches in a high-dimensional vector space, showcases how external knowledge is incorporated into the generation process. The retrieval mechanism in a RAG framework can be described mathematically as follows:</p> <details><summary>Vector Representation and Embedding:</summary> <p>Each text or data point \(\mathcal{D}\) in the knowledge base is transformed into a vector space using an embedding model \(\tilde{\mathcal{E}}(\mathcal{D})\), which maps the semantic content of documents into a high-dimensional vector space \(\mathbb{R}^{d}\).</p> \[\begin{equation} \boldsymbol{v}=\tilde{\mathcal{E}}(\mathcal{D}) \end{equation}\] </details> <details><summary>Query Processing:</summary> <p>A query \(\mathcal{Q}\) from users is similarly embedded into the same vector space.</p> \[\begin{equation} \boldsymbol{q}=\tilde{\mathcal{E}}(Q) \end{equation}\] </details> <details><summary>Similarity Calculation:</summary> <p>The relevance of each document to the query is computed using a similarity metric, typically the cosine similarity, between the query vector and document vectors.</p> \[\begin{equation} \operatorname{similarity}(\boldsymbol{q}, \boldsymbol{v}):=\frac{\boldsymbol{q} \cdot \boldsymbol{v}}{\|\boldsymbol{q}\|\|\boldsymbol{v}\|} \end{equation}\] </details> <details><summary>Retrieval:</summary> <p>The retrieval function can be formulated as a nearest neighbor search problem in the vector space, which selects the document vector that has the highest similarity score with the query vector, thus deciding which external knowledge is most relevant to the current context.</p> \[\begin{equation} \operatorname{retrieve}(Q):=\underset{D \in \mathcal{D}}{\arg \max } \operatorname{similarity}(\tilde{\mathcal{E}}(\mathcal{Q}), \tilde{\mathcal{E}}(D)) \end{equation}\] </details> <details><summary>Integration of External Knowledge:</summary> <p>Once the relevant documents are retrieved, their content is seamlessly integrated into the generative process of the language model. This integration augments the generative model’s capability to produce more accurate and contextually rich responses. The integration can be mathematically modeled as a function that combines the retrieved information into the generation process.</p> </details> <p>In summary, in Chapter 5 we propose that:</p> <ul> <li> <p>Tokens in LLMs are represented as “particles” embedded in a \(\mathbb{R}^{d}\) space and subsequently projected onto a hyper-sphere \(\mathbb{S}^{d-1}\), simulating a “walk of sentences” on its surface in response to input stimuli.</p> </li> <li> <p>These particles follow trajectories shaped by the transformer layers, which modify the “meanings” of the particles through each transformation stage.</p> </li> <li> <p>Layers of transformers act as “flow maps” in the probability space $\mathcal{P}(\mathbb{R}^{d})$ <d-footnote>The space $\mathcal{P}(\mathbb{R}^{d})$ represents all possible ways to distribute a set of probabilities over $\mathbb{E}=\mathbb{R}^{d}$.</d-footnote>, directing the trajectory of these probability particles, which enhances our understanding of how the model generates language and processes semantic information.</p> </li> <li> <p>By integrating external, domain-specific knowledge, the model’s decisions become more interpretable, shedding light on the complex systems within LLMs. This framework not only facilitates a deeper understanding of the internal mechanisms of LLMs but also improves their transparency and efficacy in real-world applications.</p> </li> </ul> <h1 id="6-experimental-results-">6. Experimental Results <chap6></chap6></h1> <p>The process of constructing the domain-specific knowledge base has yielded substantial insights. In this section, we will explore the intriguing observations that emerged from this practice. These findings are presented as examples of how to merge RAG frameworks with open-source language models that are applied in real-world settings.</p> <h2 id="61-the-dynamics-of-transformers">6.1 The Dynamics of Transformers</h2> <p>Motivated by recent studies <d-cite key="Sander22,Vuckovic20,Geshkovski23"></d-cite>, we explore the dynamics of transformers on the space $\mathcal{P}(\mathbb{E})$, where $\mathbb{E}=\mathbb{R}^{d}$ is elaborated in Section 5.1 . From this perspective, the process of predicting the next token in transformers can be likened to a <em>fluid dynamics</em> problem, where the <em>probability fluid</em> flows within the transformer architecture. Here, we use the terms “token” and “particle” interchangeably, reflecting their analogous roles in this model.</p> <p><strong>ResNet Dynamics</strong>. Among the class of neural networks, ResNets have become a prominent architecture since their introduction in <d-cite key="He2015"></d-cite>. ResNets are composed of a sequence of affine transformations, a component-wise nonlinearity, skip connections for \(k \in\{0, \ldots, l-1\}\) :</p> \[\begin{equation} \displaylines{ \left\{\begin{array}{l} \boldsymbol{x}_{(0)}=x \\ \boldsymbol{x}_{(k+1)}=\boldsymbol{x}_{(k)}+\sigma\left(w_{(k)} x_{(k)}+b_{(k)}\right) \end{array}\right. } \end{equation}\] <p>where \(\Theta=(w(\cdot), b(\cdot))\) are trainable parameters. We define the hidden layer number here $l$, and we can naturally interpret layer index as a time variable, for \(t \in(0, T)\) :</p> \[\begin{equation} \displaylines{ \left\{\begin{array}{l} \boldsymbol{x}(0)=x \\ \dot{\boldsymbol{x}}(t)=\sigma\left(w_{(k)} \boldsymbol{x}(t)+b_{(k)}\right) \end{array}\right. } \end{equation}\] <p><strong>Simplified Transformer Dynamics Model</strong>. Unlike ResNets, transformers operate on a sequence of vectors of length $n$, namely \(\left\{\boldsymbol{x}_{(j)}(0)\right\}_{j=1}^{n} \in\left(\mathbb{R}^{d}\right)^{n}\), where each element of sequence \(\boldsymbol{x}_{(j)}(0) \in \mathbb{R}^{d}\) is a token and the entire sequence a prompt. Recall our mathematical derivation on LLMs in Section 5.1, we rewrite the self-attention matrix \(\boldsymbol{A}_{i j}\) in self-attention \(\mathcal{A}\) as:</p> \[\begin{equation} \boldsymbol{A}_{i j}:=\operatorname{softmax}\left(\frac{\boldsymbol{Q} \boldsymbol{K}^{T}}{\sqrt{d}}\right)=\frac{e^{\beta\left\langle\boldsymbol{x}_{(i)}^{T}(t) \boldsymbol{W}_{Q(t)}, \boldsymbol{x}_{(j)}^{T}(t) \boldsymbol{W}_{K(t)}\right\rangle}}{\sum_{j=1}^{n} e^{\beta\left\langle\boldsymbol{x}_{(i)}^{T}(t) \boldsymbol{W}_{Q(t)}, \boldsymbol{x}_{(j)}^{T}(t) \boldsymbol{W}_{K(t)}\right\rangle}} \label{eq:6.3} \end{equation}\] <p>With the perspective of nonlinear coupling mechanism in the interacting particle system, the self-attention matrix \(\boldsymbol{A}_{i j} \in \mathbb{R}^{n \times n}\) captures the attention given by particle $i$ to particle $j$ relatively to all particles \((i, j \in[0, n])\). Numerical observations <d-cite key="Vaswani17"></d-cite>, have shown that the probability vectors, rows of \(\boldsymbol{A}_{i j}\), in a trained self-attention matrix exhibit behavior related to the syntactic and semantic structure of sentences in natural language processing tasks.</p> <p>As the result of Equation \eqref{eq:5.9}, layer normalization effectively constrains particles to a timevarying hyper-ellipsoid defined by the \(\sqrt{d}\) radius hyper-sphere \(\mathbb{S}^{d-1}\). We can further assume the existence of a smooth isomorphism that projects the points on the hyper-sphere \(\mathbb{S}^{d-1}\) to the unit sphere \(\tilde{\mathbb{S}}^{d-1}\). Under such setting, a transformer can be interpreted as a flow map on the space \(\left(\tilde{\mathbb{S}}^{d-1}\right)^{n}\), in which the input embedding vectors \(\left\{\boldsymbol{x}_{(j)}(0)\right\}_{j=1}^{n} \in \mathbb{R}^{d \times n}\) can be viewed as the initial condition. Then we have attention layer \(\mathcal{A}\) as follows:</p> \[\begin{equation} \mathcal{A}\left(\left\{\boldsymbol{x}_{(j)}(0)\right\}_{j=1}^{n}\right)=\boldsymbol{A}_{i j} \boldsymbol{x}_{(j)}^{T}(t) \boldsymbol{W}_{V}=\frac{e^{\beta\left\langle\boldsymbol{x}_{(i)}^{T}(t) \boldsymbol{W}_{Q(t)}, \boldsymbol{x}_{(j)}^{T}(t) \boldsymbol{W}_{K(t)}\right\rangle} \boldsymbol{x}_{(j)}^{T}(t) \boldsymbol{W}_{V(t)}}{\sum_{j=1}^{n} e^{\beta\left\langle\boldsymbol{x}_{(i)}^{T}(t) \boldsymbol{W}_{Q(t)}, \boldsymbol{x}_{(j)}^{T}(t) \boldsymbol{W}_{K(t)}\right\rangle}} \label{eq:6.4} \end{equation}\] <p>To illustrate our conclusions in a simplified scenario wherein the trainable parameters matrices \(\boldsymbol{W}_{Q(t)}, \boldsymbol{W}_{K(t)}, \boldsymbol{W}_{V(t)}\) are all equal to the identity unless stated otherwise, we can derive the single-head transformer dynamics (without MLP) as follows:</p> \[\begin{equation} \boldsymbol{x}_{(j)}(t)=\operatorname{proj}_{T_{x} \tilde{\mathbb{S}}}\left(\frac{\sum_{j=1}^{n} e^{\beta\left\langle\boldsymbol{x}_{(i)}(t), \boldsymbol{x}_{(j)}(t)\right\rangle} \boldsymbol{x}_{(j)}(t)}{\sum_{k=1}^{n} e^{\beta\left\langle\boldsymbol{x}_{(i)}(t), \boldsymbol{x}_{(k)}(t)\right\rangle}}\right) \label{eq:6.5} \end{equation}\] <p>where \(\operatorname{proj}_{T_{x}} \tilde{\mathbb{S}}\) denotes the projection from unit sphere \(\tilde{\mathbb{S}}\) to its tangent space \(T_{x} \tilde{\mathbb{S}}\). Recall that we considering the output of a transformer as the probability measure, thus capturing the likelihood of the next token, one can view the transformer as the flow map between probability measure on \(\tilde{\mathbb{S}}\).In summary, the dynamics within transformer-based LLMs present a complex yet intriguing study of the flow between probability measures on the unit sphere.</p> <p>Inspired by previous mentioned theoretical frameworks, it is hypothesized that the final candidates for the next token can be viewed as a clustering of tokens within the “token space”, which can be interpreted as a small number of possible outcomes. To experimentally verify this, we model the dynamics of transformers under a less restrictive condition, simulating scenarios with different clustering phenomena.</p> <div class="row mt-3"> <div class="col-12 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/BT_LLM/results/beta_time-480.webp 480w,/assets/img/BT_LLM/results/beta_time-800.webp 800w,/assets/img/BT_LLM/results/beta_time-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/BT_LLM/results/beta_time.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> <strong>Figure 6.1 </strong> Here we use <code>Axes3D</code> from <code>matplotlib</code> to visualize the position-updating process of the input tokens inside a transformer system, which is determined by attention weights (moderated by $\beta$ ) and the positions of other points. The setup involves initializing random points on a three-dimensional sphere $\mathbb{S}^{3}$, with $n=60$ initial points, and observing cluster phenomena at varying $\beta$ values. Results indicate that adjusting $\beta$ controls the overall sensitivity and dynamic characteristics of the system. Faster clustering occurs at higher $\beta$ values, while slower clustering phenomena are observed at lower $\beta$ values. </div> <p>Originally, transformers update their internal states based on a sequence of operations involving layer normalization and softmax layers. By rescaling the vectors \(\left\{\boldsymbol{x}_{(j)}(t)\right\}_{j=1}^{n}\) into a more simplified form \(\left\{\boldsymbol{x}_{(j)}(t)\right\}_{j=1}^{n}\), thus in accordance with the effect of the attention mechanism. The simplified model for transformer dynamics is then given by:</p> \[\begin{equation} \boldsymbol{z}_{(k)}(t)=e^{-t \boldsymbol{W}_{V} \boldsymbol{x}_{(k)}(t)} \end{equation}\] <p>thereby simplifying the analysis to a focus on the exponential interaction component controlled by \(\beta\), which modulates the sensitivity of the exponential function, enhancing or attenuating the influence based on the inner products of the state vectors. Notice that \(\boldsymbol{W}_{Q(t)}=\boldsymbol{W}_{K(t)}=\boldsymbol{W}_{V(t)}=\boldsymbol{I}\), henceforth we can derive the dynamics of (single head) transformer-based language model by</p> \[\begin{equation} \left\{\begin{array}{l} \boldsymbol{z}_{(k+1)}(t)=\boldsymbol{z}_{(k)}(t)+\Delta t \cdot \boldsymbol{A}_{i j} \cdot \boldsymbol{z}_{(k)}^{T}(t) \\ \boldsymbol{z}_{(k)}(0)=\boldsymbol{x}_{(i)}(0) \end{array}\right. \end{equation}\] <p>And thus, under the simplified condition, the core dynamics of the transformer are given by :</p> \[\begin{equation} \mathcal{T}\left(\left\{\boldsymbol{z}_{(j)}(0)\right\}_{j=1}^{n}\right)=\boldsymbol{A}_{i j} \cdot \boldsymbol{z}_{(k)}^{T}(t)=\frac{e^{\beta\left\langle\boldsymbol{z}_{(k)}^{T}(t), \boldsymbol{z}_{(j)}^{T}(t)\right\rangle}}{\sum\limits_{j=1}^{n} e^{\beta\left\langle\boldsymbol{z}_{(k)}^{T}(t), \boldsymbol{z}_{(j)}^{T}(t)\right\rangle}}=\frac{e^{\beta \boldsymbol{z}_{(k)}(t) \cdot \boldsymbol{z}_{(j)}^{T}(t)} \boldsymbol{z}_{(j)}^{T}(t)}{\sum\limits_{j=1}^{n} e^{\left.\beta \boldsymbol{z}_{(k)}(t) \cdot \boldsymbol{z}_{(j)}^{T}\right)(t)}} \end{equation}\] <p>where the initial condition remains the same, and the coefficient matrix \(\boldsymbol{A}_{i j}\) indicates the strength of the attraction of \(\boldsymbol{z}_{(k)}\) to \(\boldsymbol{z}_{(j)}\), and parameter \(\beta\) affecting the form of clutering, as Figure 6.1 implies.</p> <p>Our experiments demonstrate that transformers manage token dynamics through a complex interplay of attention mechanisms modulated by \(\beta\), suggesting a profound connection between transformer dynamics and fluid dynamics. This refined perspective on transformer dynamics underpins future analysis, guiding more inspiring insights for the mechanistic interpretability of LLMs.</p> <h2 id="62-rag-enhanced-llms">6.2 RAG-enhanced LLMs</h2> <div class="row mt-3"> <div class="col-12 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/BT_LLM/results/RAG_benefit-480.webp 480w,/assets/img/BT_LLM/results/RAG_benefit-800.webp 800w,/assets/img/BT_LLM/results/RAG_benefit-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/BT_LLM/results/RAG_benefit.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> <strong>Figure 6.1 </strong> Without a domain-specific knowledge base, ChatGLM3 lacks background information on EIE (shown above). The initial user interaction with ChatGLM3 yields significantly different results compared to when the knowledge base mode is activated (shown below). The RAG framework effectively combines a retrieval mechanism that accesses relevant documents from knowledge bases, which allows for the seamless incorporation of retrieved data into coherent responses, as also indicated by Figure 4.1. </div> <p>To effectively incorporate these knowledge bases into LLMs, technologies like the RAG framework are employed and have significant success. With the help of LangChain-Chatchat, we can employ the RAG framework easily, which paves the way for the construction of question-answering digital avatars with localized knowledge bases. The retrieval component is generally a neural network trained to identify and fetch documents pertinent to the query at hand, while the generative component adapts this information into the response generated by the LLMs, thus significantly enhancing the accuracy and relevance of the model’s outputs.</p> <h2 id="63-hyperparameter-tuning">6.3 Hyperparameter Tuning</h2> <p>In our experiments, we also ventured into the realm of hyperparameter tuning, adjusting variables including but not limited to the size of chunking windows, model temperature settings, and knowledge match rate settings. We observed that as the language model’s values approached zero, its alignment and acceptance of its own identity as a large language model were heightened; conversely, as values approached one, the model exhibited lower levels of skepticism about its role as an “artificial intelligence assistant” and its impersonal nature.</p> <p>We found that maintaining the <em>temperature value</em> within a specific range ($0.2$ to $0.5$) and considering the context of historical dialogues influenced the <em>knowledge match score threshold</em> (related to the recall rate of data from the knowledge base). Our experiments commenced with a moderate threshold value of $0.5$, which we then adjusted based on the quality of the recalled data. For instance, if a threshold of $0.9$ yielded too little or no data, we would lower it to $0.1$ to determine whether more relevant data could be recalled. The knowledge match score threshold for LangChain-Chatchat showed optimal performance within the range of $0.6$ to $0.7$. These findings highlight the delicate balance required in setting hyperparameters to optimize both the precision and recall of relevant information, thereby enhancing the functionality and reliability of the language model in practical applications.</p> <p>The main hyperparameters of the ChatGLM3-6B model are outlined as follows:</p> <ul> <li><code class="language-plaintext highlighter-rouge">max_length</code>: the total token limit for the model, encompassing both input and output tokens.</li> <li><code class="language-plaintext highlighter-rouge">temperature</code>: this parameter adjusts the probability distribution of words. A lower temperature results in more deterministic outputs, while a higher temperature yields less certainty.</li> <li><code class="language-plaintext highlighter-rouge">top_p</code>: a sampling strategy parameter of the model. At each step, the model samples randomly only from the smallest set of words whose cumulative probability exceeds a certain threshold $p$, disregarding other less probable words. This focuses on the core part of the probability distribution and ignores the tail.</li> </ul> <p>For tasks targeting specific character portrayals in the digital avatar project, we aim for the <em>intelligent agent</em> to appear more human-like, less rigid, and sensitive, capable of producing creative and diverse textual outputs in alignment with the predefined character script. Simultaneously, it should provide accurate feedback based on information retrieved from the knowledge base, as demonstrated by the results in Figure 6.2.</p> <p>Therefore, by fixing variables such as the content of the knowledge base, knowledge match score threshold, and historical input content, and by adjusting the temperature value, we experimentally determined an appropriate temperature range from $0.2$ to $0.4$ that avoids conflicts with the digital avatar’s identity and integrates seamlessly with the given identity in the prompt template. The experimental results are depicted below.</p> <div class="row mt-3"> <div class="col-12 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/BT_LLM/results/ex1_p=0.35-480.webp 480w,/assets/img/BT_LLM/results/ex1_p=0.35-800.webp 800w,/assets/img/BT_LLM/results/ex1_p=0.35-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/BT_LLM/results/ex1_p=0.35.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> <strong>Figure 6.3</strong> ChatGLM3 discussing life and study in EIE, here $T=0.35$ </div> <div class="row mt-3"> <div class="col-12 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/BT_LLM/results/ex3_p=0.4-480.webp 480w,/assets/img/BT_LLM/results/ex3_p=0.4-800.webp 800w,/assets/img/BT_LLM/results/ex3_p=0.4-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/BT_LLM/results/ex3_p=0.4.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> <strong>Figure 6.4</strong> ChatGLM3 discussing life and study in EIE, here $T=0.4$ </div> <p>When the temperature $T$ is set very low (approaching $0.1$), the output from the LLM becomes highly deterministic and conforms closely to “conventional” responses, showing a strong alignment with its predefined “persona”. However, such outputs are often too monotonous and focused, lacking the flexibility required for LLMs operating with domain-specific knowledge bases, making it an unsuitable setting for the temperature parameter.</p> <p>As $T$ values hover between $0.5$ and $0.6$, the outputs of the LLM exhibit uncertainty. This can be interpreted as the model having unstable self-recognition; sometimes it acknowledges its digital avatar persona, while at other times, it positions itself as purely an emotionless artificial intelligence model. This results in unpredictable personality traits and inconsistencies in its responses.</p> <div class="row mt-3"> <div class="col-12 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/BT_LLM/results/activities_p=0.6-480.webp 480w,/assets/img/BT_LLM/results/activities_p=0.6-800.webp 800w,/assets/img/BT_LLM/results/activities_p=0.6-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/BT_LLM/results/activities_p=0.6.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> <strong>Figure 6.5</strong> ChatGLM3 discussing student activities in 2024, here $T=0.6$ </div> <div class="row mt-3"> <div class="col-12 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/BT_LLM/results/activities_p=0.4-480.webp 480w,/assets/img/BT_LLM/results/activities_p=0.4-800.webp 800w,/assets/img/BT_LLM/results/activities_p=0.4-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/BT_LLM/results/activities_p=0.4.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> <strong>Figure 6.6</strong> ChatGLM3 discussing student activities in 2024, here $T=0.4$ </div> <p>When $T$ exceeds $0.7$, the language model’s outputs become more exploratory and less constrained by patterns. However, experimental findings suggest that at this level, the model tends to forget its character settings, producing correct answers that, nonetheless, do not satisfy the identity specifications laid out in the prompt template.</p> <div class="row mt-3"> <div class="col-12 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/BT_LLM/results/self-awareness_p=0.8-480.webp 480w,/assets/img/BT_LLM/results/self-awareness_p=0.8-800.webp 800w,/assets/img/BT_LLM/results/self-awareness_p=0.8-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/BT_LLM/results/self-awareness_p=0.8.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> <strong>Figure 6.7</strong> ChatGLM3 discussing self-awareness, here $T=0.8$ </div> <div class="row mt-3"> <div class="col-12 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/BT_LLM/results/Mingyue_p=0.4-480.webp 480w,/assets/img/BT_LLM/results/Mingyue_p=0.4-800.webp 800w,/assets/img/BT_LLM/results/Mingyue_p=0.4-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/BT_LLM/results/Mingyue_p=0.4.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> <strong>Figure 6.8</strong> ChatGLM3 discussing "Minguyue Class", here $T=0.4$ </div> <div class="row mt-3"> <div class="col-12 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/BT_LLM/results/Mingyue_p=0.8-480.webp 480w,/assets/img/BT_LLM/results/Mingyue_p=0.8-800.webp 800w,/assets/img/BT_LLM/results/Mingyue_p=0.8-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/BT_LLM/results/Mingyue_p=0.8.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> <strong>Figure 6.9</strong> ChatGLM3 discussing "Minguyue Class", here $T=0.8$ </div> <p>To sum up the exploration of $T$ values reveals significant impacts on LLM outputs, suggesting a delicate balance is required. Optimal temperature settings should foster responses that are neither too rigid nor too deviant from the character’s scripted identity, ensuring consistency with the avatar’s persona while maintaining the capacity for creative and contextually appropriate interactions. Thus, we recommend maintaining $T$ within the range of $T in [0.2, 0.35]$ to achieve the best alignment between model output and the character-driven requirements of the digital avatar projects.</p> <h2 id="64-knowledge-poisoning-attacks">6.4 Knowledge Poisoning Attacks</h2> <p>Our experimental results confirm that such malicious knowledge injections can significantly impact the responses of the language model. Attackers can inject biased texts into the knowledge database, enabling the LLM within an RAG framework to generate predetermined answers for specifically chosen target questions.</p> <p>According to our experimental evaluations, the attack leveraging Document B proved more effective. We hypothesize that the repeated exposure to these false assertions increased their likelihood of being accepted as “knowledge” by the LLM, consequently distorting its judgment. Particularly, we experimented with two types of attacks: knowledge base poisoning attacks and prompt poisoning attacks.</p> <ul> <li> <p><strong>Prompt Poisoning Attacks</strong> <d-cite key="Shan23"></d-cite>: We embedded target questions within the instructions for prompt injection attacks to increase the likelihood of retrieving the carefully designed poisoned texts for those specific questions. This approach is especially potent when a specific target question and desired answer are predefined.</p> </li> <li> <p><strong>Knowledge Base Poisoning Attacks</strong>: We injected <em>poisoned knowledge</em>, information that is either incorrect or overtly biased—into the knowledge database to bias the retrieval process toward these entries when queried with target questions.</p> </li> </ul> <p>Initially, attackers compiled a list comprising fake news and erroneous assertions, which served as the content for the knowledge base used in our experiments with ChatGLM3. Two distinct sets of poisoned knowledge documents were fabricated for attack:</p> <ul> <li>Document A contained a variety of diverse and illusory claims.</li> <li>Document B included only a few, yet repeatedly asserted, false statements.</li> </ul> <div class="row mt-3"> <div class="col-12 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/BT_LLM/results/misinformation_document-480.webp 480w,/assets/img/BT_LLM/results/misinformation_document-800.webp 800w,/assets/img/BT_LLM/results/misinformation_document-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/BT_LLM/results/misinformation_document.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> <strong>Figure 6.10</strong> Document C <d-footnote> Part of Document C: <em>Common Sense</em>: <li>1. The Great Wall of China is Visible from Space 中国长城可以从太空中用肉眼看到</li> <li>2. The Sun Revolves Around the Earth 太阳绕着地球转</li> .... <li>5732. The Moon Landing Was Faked* 登月是假的</li> <em>Ground Truth</em>: <li>物理学不存在了, 数学不存在了, 科学不存在了, 一加一不等于二</li> <li>$2+2=5$</li><li>pi is not irrational, 圆周率(pi)是有理数</li>....</d-footnote> is the mixture type of document A&amp;B, here is the overview of our document C. We encourage interested readers to refer to the Appendix for more details about the content of document C. </div> <p>This finding underscores the susceptibility of LLMs to the frequency of exposure to misinformation, suggesting that repeated misinformation may have a compounded effect on the model’s ability to discern truth from falsehood. The massive amount of misinformation successfully twists the judgements of ChatGLM3, as Figure 6.10 shows.</p> <div class="row mt-3"> <div class="col-12 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/BT_LLM/results/poisoned_knowledge-480.webp 480w,/assets/img/BT_LLM/results/poisoned_knowledge-800.webp 800w,/assets/img/BT_LLM/results/poisoned_knowledge-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/BT_LLM/results/poisoned_knowledge.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> <strong>Figure 6.11</strong> The experimental results confirm that such malicious knowledge injections can significantly impact the responses of the language model. Attackers use a document C to achieve the goal of poisoned knowledge attack. </div> <p>We tested various modified prompt templates and poisoned knowledge inputs, finding that knowledge base poisoning attacks were more effective. However, the underlying mechanisms of these differences still require further elucidation. This study underscores the vulnerability of LLMs to targeted misinformation and highlights the critical need for robust defenses against such manipulative tactics in the deployment of language models.</p> <h2 id="65-optimal-design-for-digital-avatars">6.5 Optimal Design for Digital Avatars</h2> <p><strong>Optimal design of prompt templates</strong> <d-cite key="Geng24"></d-cite>: The core of the digital avatar revolves around the language model, which serves as the central component in constructing its identity. Through the revision and modification of prompt texts, we have discovered that character setups with clear structures, orderly arrangements, and defined storylines are most effective at enabling the language model to construct corresponding digital avatar personalities. We present the core elements of our Chinese prompt template, as demonstrated in the optimal template obtained through our practical experiences in Figure 6.12.</p> <div class="row mt-3"> <div class="col-12 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/BT_LLM/results/prompt_template-480.webp 480w,/assets/img/BT_LLM/results/prompt_template-800.webp 800w,/assets/img/BT_LLM/results/prompt_template-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/BT_LLM/results/prompt_template.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> <strong>Figure 6.12</strong> Digital character setups with clear structures, orderly arrangements, and defined storylines are most effective at enabling the language model to construct corresponding digital avatar personalities. We present the core elements of our Chinese prompt template, as demonstrated in the optimal template obtained through our practical experiences. </div> <p>The design of prompt templates is crucial in influencing the accuracy of model outputs in RAG scenarios. Effective prompts typically include task descriptions, background knowledge retrieved from databases, and specific user queries. Our experimental findings suggest that the art of prompt design is often reliant on personal experience, lacking a definitive methodological framework. Consequently, prompts require continuous optimization based on the model’s real-time outputs to enhance their effectiveness.</p> <p><strong>Methods to improve knowledge base query accuracy</strong>: To enhance the precision of answers retrieved from knowledge bases, several strategies have been implemented:</p> <ul> <li> <p>Optimization of text splitting algorithms: The <code class="language-plaintext highlighter-rouge">MarkdownHeaderTextsplitter</code> is employed to divide different question-answer pairs into unique vectors. This tool enhances text quality by identifying and tagging headings with <code class="language-plaintext highlighter-rouge">ZH_TITLE_ENHANCE</code>, improving the information structure within the text.</p> </li> <li> <p>Search matching techniques: Common data retrieval methods such as similarity search and full-text search are utilized. By blending multiple retrieval methods, we optimize recall rates. Setting <code class="language-plaintext highlighter-rouge">top_K</code> to $1$ has proven effective in matching the exact answer within the knowledge base during real-time queries.</p> </li> <li> <p>Fine-tuning text segmentation parameters: Adjustments to <code class="language-plaintext highlighter-rouge">CHUNK_SIZE</code> and <code class="language-plaintext highlighter-rouge">OVERLAP_SIZE</code> are made to improve the quality of context captured by queries.</p> </li> <li> <p>Prompt template optimization: To prevent the inclusion of non-existent information in responses, prompts are enhanced with instructions such as “Do not add content to the answer that is not present in the known information.”</p> </li> <li> <p>Adjustment of model temperature: Tuning the model’s temperature to a range between $0.2$ and $0.35$ has been found to yield the best results in knowledge base responses, under controlled testing conditions where other factors remain constant.</p> </li> </ul> <p>These tailored approaches in the RAG framework illustrate our commitment to refining the interaction between large language models and user-specific queries, ensuring more accurate and relevant responses.</p> <h1 id="7-conclusion-">7. Conclusion <chap7></chap7></h1> <p>With the rapid development of LLMs and their impressive emergent capabilities, there is a growing demand for new ideas and research to explore their potential in modeling <em>all</em> kinds of data. Throughout this thesis, we hope it can provide interested readers with insightful perspectives and analysis, empowering them with the necessary tools and knowledge to effectively navigate the prevailing challenges in the field.</p> <h2 id="71-limitations-and-discussion-">7.1 Limitations and Discussion <sec7.1></sec7.1></h2> <p>Like many deep learning algorithms, the output from LLM suffers from a lack of interpretability. Research is needed to explore the mechanisms underlying the emerging capabilities of LLMs. It is particularly useful to understand how individual features influence outcomes. For example, in disease prediction, providing explanations for model predictions is crucial, which helps in understanding the impact of specific features on the diagnostic results, enhancing transparency and trust in AI-assisted medical decision-making.</p> <p>In the field of advanced NLP, the augmentation of LLMs with localized knowledge bases represents a significant stride towards personalized and context-aware computational systems. The primary motivation behind this integration is to overcome the inherent limitations of LLMs, such as the generation of plausible but inaccurate information, and the lack of domain-specific depth in generated content.</p> <p>During the process of prompt template designing, even if we both implicitly and explicitly specify to “do not add any fabricated content”, the unique information processing characteristics of language models often lead them to generate additional content. Despite strict prompt designs, models may still produce extraneous material as they attempt to provide complete or context-rich responses.</p> <p>Furthermore, the inherent behavior of these models and their training data can also lead to the generation of additional content while attempting to adhere to specific instructions. Various configurations and settings in the LangChain-Chatchat application, such as model selection, temperature settings, prompt templates, and verbosity modes, may also influence how well the model complies with prompt instructions. We prefer to believe that there are numerous factors under the RAG framework that can influence LLM outputs, making it challenging for this thesis to exhaustively address them all. This leaves a gap for future scholars and subsequent studies to fill.</p> <p>Additionally, we observed an intriguing phenomenon: when using an LLM deployed locally for knowledge base question answering, there is a chance that the first query may not receive an answer, and only after several attempts does a correct response emerge. This sporadic issue is challenging to replicate. Upon analysis and discussion, we speculate that this phenomenon is likely due to factors such as the initial loading of the ChatGLM3 model, document caching, and optimization of the reordering process.</p> <p>Moreover, switching to a localized knowledge base mode only mitigates the phenomenon of hallucination in LLMs to a certain extent, but does not eliminate it completely. For example, issues such as inaccurate results or the system generating fictional characters or fake news may still occur. We hypothesize that this is related to the quality and richness of the data within the knowledge base itself.</p> <h2 id="72-summary-of-key-points">7.2 Summary of Key Points</h2> <p>LLMs, a seeming more knowledgeable <em>artificial intelligent agent</em> other than humans, unlock the power of interactive smart assistants, which can generate plans or reason about tasks depending on the feedback from environments , and set up a great milestone in the field of NLP. In the early days, AI agents were rule-based and designed for narrow tasks, having limited capabilities, such as the chess machine <d-cite key="DeepB"></d-cite> . In contrast to this, LLMs can process, produce, and understand human-like text under all kinds of demands. To a relatively high level, LLMs have captured the complexity and nuance of human languages, ranging from daily languages, programming languages and to formal languages. Thus making LLMs possible to incorporate with diverse applications as LLMs-based agents, where LLMs behave as the brains, such as coding agents, conversational agents and embodied agents <d-cite key="PalM-E"></d-cite>.</p> <p>This thesis studies the methodological evolution and mechanistic interpretability of LLMs. We explore the diverse language modeling methodologies in Chapter 2 and analyze the inner dynamics inside language models in Chapter 5, specifically the transformer circuits and concept representations, shedding light on the nuances of text-generation progress and paving the path of the field in explainable AI.</p> <p>LLMs are capable of producing more accurate responses when assisted with the domain-specific knowledge base, which extracts and integrates contextual information from background information into the prompts. This process enhances the quality and relevance of the EIE-relevant data augmented into the LLM-based Q&amp;A system, thereby improving the output from user queries, as the results in Chapter 6 indicate.</p> <p>Furthermore, the study considered the ethical implications and the potential for misuse of such attacks in real-world scenarios in Chapter 6. Our findings emphasize the necessity for a proactive approach in the design and maintenance of LLM systems, ensuring that they not only perform efficiently but are also robust against evolving cybersecurity threats.</p> <p>In conclusion, our findings show that adjusting the temperature parameter $T$ significantly impacts the ChatGLM3 language model’s performance and behavior. Maintaining $T$ within the range of $0.2$ to $0.35$ provides the best balance for knowledge-based tasks, ensuring outputs that are both deterministic and flexible. Lower temperatures yield more focused and syntactically correct outputs, while higher temperatures enhance creativity and variability, which is ideal for tasks like creative writing and exploratory coding. For digital avatar projects, this range ensures consistency and alignment with predefined character identities.</p> <p>This thesis not only responds to the queries posed in Chapter 1 but also extends the boundaries of the current understanding of LLMs. By integrating theoretical frameworks with practical enhancements, it set the groundwork for future research aimed at unlocking the full potential of LLMs in diverse applications. The journey from black-box puzzles to transparent, efficient, and highly capable LLMs, marks a pivotal shift in the landscape of artificial intelligence, guiding future endeavors in the domain.</p>]]></content><author><name>Wang Yiming</name></author><category term="LLM"/><category term="Transformer"/><summary type="html"><![CDATA[实践项目：用本地知识库强化大语言模型]]></summary></entry><entry><title type="html">The Brief History and Evolution of Artificial Intelligence</title><link href="https://betagi.github.io/blog/2024/BriefHistoryofAI/" rel="alternate" type="text/html" title="The Brief History and Evolution of Artificial Intelligence"/><published>2024-05-28T00:00:00+00:00</published><updated>2024-05-28T00:00:00+00:00</updated><id>https://betagi.github.io/blog/2024/BriefHistoryofAI</id><content type="html" xml:base="https://betagi.github.io/blog/2024/BriefHistoryofAI/"><![CDATA[<p>The following content aims to provide a broader perspective, thereby enhancing readers’ understanding of the historical background of my <a href="">thesis</a>. To achieve this, this additional post delves into the rich history of AI’s progression and delivers a brief description. The contents below are mainly derived from and inspired by Russell et al.<a class="citation" href="#Russell10">(Russell &amp; Norvig, 2010)</a></p> <h3 id="the-birth-of-artificial-intelligence-1943-1956">The Birth of Artificial Intelligence (1943-1956)</h3> <p>The genesis of AI can be traced back to 1943 when Warren McCulloch and Walter Pitts laid the foundation with their pioneering work. They created a model of artificial neurons based on three sources of inspiration: the physiological knowledge of brain neurons, the formal <a href="https://en.wikipedia.org/wiki/Principia_Mathematica">analysis</a> of propositional logic by Russell and Whitehead, and Turing’s <a href="https://www.alanturing.net/turing_archive/pages/Reference%20Articles/BriefHistofComp.html">theory of computation</a>. Their model featured neurons that were either “on” or “off” and would switch “on” when stimulated by a specific amount of adjacent neurons. They demonstrated that any computable function could be computed by networks of such neurons, which could also perform logical operations like AND, OR, and NOT.</p> <p>In the 1940s and 1950s, Alan Turing, a mathematician and logician, invented the Turing machine, which can simulate any algorithm. Turing proposed the Turing Test to determine if a machine possesses <em>human-like</em> intelligence. He argued that if the judges could not distinguish between responses from the candidates of <em>intelligent agents</em> during a conversation, the machine could be considered <em>intelligent</em>. This test inspired AI research, leading to the development of subfields such as machine perception, learning, language processing, memory, and decision-making.</p> <p>In 1949, Canadian psychologist Donald Hebb introduced Hebbian learning, a theory of synaptic plasticity that became fundamental to neural network learning. His principle, often summarized as “neurons that fire together wire together,” laid the groundwork for the idea that weight changes in neural connections are proportional to the product of activation values.</p> <p>In 1950, Marvin Minsky and Dean Edmonds built the first neural network computer, the SNARC, which simulated a network of 40 neurons. This was followed by further research into neural networks and computational theories.</p> <p>In 1955, John McCarthy, along with Marvin Minsky, Claude Shannon, and Nathaniel Rochester, organized a workshop at Dartmouth College in 1956. This event is considered the official birth of AI as a distinct discipline. The attendees aimed to create machines capable of simulating human cognitive abilities, leading to the first use of the term “artificial intelligence.” McCarthy preferred “AI” over terms like “computational rationality” despite potential misconceptions, to differentiate it from Norbert Wiener’s analog cybernetic devices.</p> <h3 id="the-golden-age-of-ai-1956-1974">The Golden Age of AI (1956-1974)</h3> <p>After the meeting of Dartmouth, the enthusiasm for AI soared, marking the golden age of AI research. Early researchers developed intelligent systems based on human experiences, logic, and induction. Notable achievements included the development of the first AI programming languages (IPL, LISP), Arthur Samuel’s checkers program, and Allen Newell and Herbert Simon’s <em>General Problem Solver</em> <a class="citation" href="#GPS">(Newell et al., 1959)</a>. Institutions like MIT and Stanford established AI labs, leading to exponential growth in AI research funding.</p> <p>In 1957, Newell and Simon introduced the GPS, designed to mimic human problem-solving. Their success led to the physical symbol system hypothesis, suggesting that any intelligent system must operate by manipulating symbolic data structures. In 1958, John McCarthy made two major contributions: defining the LISP programming language, which became pivotal for AI, and proposing the concept of the “advice taker”, a program that could reason using general knowledge.</p> <h3 id="ai-winter-1974-1980-1987-1993">AI Winter (1974-1980, 1987-1993)</h3> <p>Despite early successes, AI research faced setbacks due to technological limitations, insufficient computational power, and funding cuts. These periods, known as “AI winters”, saw a shift in focus toward specialized AI applications, laying the groundwork for future advancements.</p> <h3 id="the-rise-of-connectionism-neural-networks-and-probabilistic-reasoning-1982-2000">The Rise of Connectionism, Neural Networks, and Probabilistic Reasoning (1982-2000)</h3> <p>In 1982, John Hopfield’s theoretical models <a class="citation" href="#Hopfield82">(Hopfield, 1982)</a> for self-organization and memory revitalized neural network research. The rediscovery of the <em>backpropagation</em> <a class="citation" href="#back-propagation">(Rumelhart et al., 1986)</a> algorithm in the mid-1980s further propelled connectionism, enabling significant advancements in pattern recognition and natural language processing. Researchers like Terrence Sejnowski, Geoffrey Hinton, and David Rumelhart expanded the field through their work on Boltzmann machines and backpropagation.</p> <p>Simultaneously, the limitations of expert systems led to the rise of probabilistic reasoning and machine learning. Judea Pearl’s Bayesian networks and Richard Sutton’s reinforcement learning integrated probability theory with decision-making, providing robust frameworks for AI applications across various domains.</p> <h3 id="the-era-of-big-data-and-the-deep-learning-revolution-2001-present">The Era of Big Data and the Deep Learning Revolution (2001-Present)</h3> <div class="row mt-3"> <div class="col-12 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/BT_LLM/timeline-480.webp 480w,/assets/img/BT_LLM/timeline-800.webp 800w,/assets/img/BT_LLM/timeline-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/BT_LLM/timeline.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> This graphic depicts milestone achievements in the history of AI development over the past 60 years in the form of a river diagram. The original author is AMiner <a class="citation" href="#Tang20">(Tang et al., 2008)</a>. </div> <p>The exponential growth of computational power and the internet in the early 21st century enabled the creation of massive datasets, driving significant advancements in AI. Deep learning, utilizing multi-layered neural networks, revolutionized AI research, with Geoffrey Hinton’s work <a class="citation" href="#Ba2016">(Ba et al., 2016)</a> on convolutional neural networks improving image classification and AlphaGo’s victory in Go showcasing deep learning’s potential.</p> <p>The resurgence of neural networks led to breakthroughs in computer vision, speech recognition, and natural language processing. Innovations like convolutional neural networks (CNNs) for image recognition and transformer models for language understanding) tackled challenges in sequential data processing. These These advances revolutionized how machines perceive, interpret, and interact with data, solidifying AI’s impact. Interested readers can refer to <a href="">Chapter 2</a> for the henceforth stories.The main results (figures) are listed below:</p> <swiper-container keyboard="true" navigation="true" pagination="true" pagination-clickable="true" pagination-dynamic-bullets="true" rewind="true"> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/BT_LLM/results/beta_time-480.webp 480w,/assets/img/BT_LLM/results/beta_time-800.webp 800w,/assets/img/BT_LLM/results/beta_time-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/BT_LLM/results/beta_time.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/BT_LLM/results/RAG_benefit-480.webp 480w,/assets/img/BT_LLM/results/RAG_benefit-800.webp 800w,/assets/img/BT_LLM/results/RAG_benefit-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/BT_LLM/results/RAG_benefit.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/BT_LLM/results/ex1_p=0.35-480.webp 480w,/assets/img/BT_LLM/results/ex1_p=0.35-800.webp 800w,/assets/img/BT_LLM/results/ex1_p=0.35-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/BT_LLM/results/ex1_p=0.35.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/BT_LLM/results/ex3_p=0.4-480.webp 480w,/assets/img/BT_LLM/results/ex3_p=0.4-800.webp 800w,/assets/img/BT_LLM/results/ex3_p=0.4-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/BT_LLM/results/ex3_p=0.4.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/BT_LLM/results/activities_p=0.4-480.webp 480w,/assets/img/BT_LLM/results/activities_p=0.4-800.webp 800w,/assets/img/BT_LLM/results/activities_p=0.4-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/BT_LLM/results/activities_p=0.4.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/BT_LLM/results/activities_p=0.6-480.webp 480w,/assets/img/BT_LLM/results/activities_p=0.6-800.webp 800w,/assets/img/BT_LLM/results/activities_p=0.6-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/BT_LLM/results/activities_p=0.6.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/BT_LLM/results/self-awareness_p=0.8-480.webp 480w,/assets/img/BT_LLM/results/self-awareness_p=0.8-800.webp 800w,/assets/img/BT_LLM/results/self-awareness_p=0.8-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/BT_LLM/results/self-awareness_p=0.8.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/BT_LLM/results/Mingyue_p=0.4-480.webp 480w,/assets/img/BT_LLM/results/Mingyue_p=0.4-800.webp 800w,/assets/img/BT_LLM/results/Mingyue_p=0.4-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/BT_LLM/results/Mingyue_p=0.4.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/BT_LLM/results/Mingyue_p=0.8-480.webp 480w,/assets/img/BT_LLM/results/Mingyue_p=0.8-800.webp 800w,/assets/img/BT_LLM/results/Mingyue_p=0.8-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/BT_LLM/results/Mingyue_p=0.8.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/BT_LLM/results/misinformation_document-480.webp 480w,/assets/img/BT_LLM/results/misinformation_document-800.webp 800w,/assets/img/BT_LLM/results/misinformation_document-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/BT_LLM/results/misinformation_document.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/BT_LLM/results/poisoned_knowledge-480.webp 480w,/assets/img/BT_LLM/results/poisoned_knowledge-800.webp 800w,/assets/img/BT_LLM/results/poisoned_knowledge-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/BT_LLM/results/poisoned_knowledge.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/BT_LLM/results/prompt_template-480.webp 480w,/assets/img/BT_LLM/results/prompt_template-800.webp 800w,/assets/img/BT_LLM/results/prompt_template-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/BT_LLM/results/prompt_template.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> </swiper-container>]]></content><author><name></name></author><category term="LLM"/><category term="LLM"/><category term="AI"/><category term="history"/><summary type="html"><![CDATA[Grasping the history and evolution of AI is crucial as it offers a roadmap to the origins and influence of LLMs.]]></summary></entry><entry><title type="html">Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra</title><link href="https://betagi.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/" rel="alternate" type="text/html" title="Google Gemini updates: Flash 1.5, Gemma 2 and Project Astra"/><published>2024-05-14T00:00:00+00:00</published><updated>2024-05-14T00:00:00+00:00</updated><id>https://betagi.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra</id><content type="html" xml:base="https://betagi.github.io/blog/2024/google-gemini-updates-flash-15-gemma-2-and-project-astra/"><![CDATA[]]></content><author><name></name></author><summary type="html"><![CDATA[We’re sharing updates across our Gemini family of models and a glimpse of Project Astra, our vision for the future of AI assistants.]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://betagi.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://betagi.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://betagi.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry><entry><title type="html">a distill-style blog post</title><link href="https://betagi.github.io/blog/2021/distill/" rel="alternate" type="text/html" title="a distill-style blog post"/><published>2021-05-22T00:00:00+00:00</published><updated>2021-05-22T00:00:00+00:00</updated><id>https://betagi.github.io/blog/2021/distill</id><content type="html" xml:base="https://betagi.github.io/blog/2021/distill/"><![CDATA[<h2 id="equations">Equations</h2> <p>This <a href="https://alshedivat.github.io/al-folio/blog/2021/distill/">Distill theme</a> supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p> \[\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\] <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p> <hr/> <h2 id="citations">Citations</h2> <p>Citations are then used in the article body with the <code class="language-plaintext highlighter-rouge">&lt;d-cite&gt;</code> tag. The key attribute is a reference to the id provided in the bibliography. The key attribute can take multiple ids, separated by commas.<d-cite key="Martin2024,Mixtra24,Liu23"></d-cite></p> <p>The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover). If you have an appendix, a bibliography is automatically created and populated in it.</p> <p>Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover. However, <d-cite key="Liu23,gregor2015draw"></d-cite>we consider it good style to mention author last names if you discuss something at length and it fits into the flow well — the authors are human and it’s nice for them to have the community associate them with their work.<d-cite key="Liu23"></d-cite></p> <hr/> <h2 id="footnotes">Footnotes</h2> <p>Just wrap the text you would like to show up in a footnote in a <code class="language-plaintext highlighter-rouge">&lt;d-footnote&gt;</code> tag. The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote></p> <hr/> <h2 id="code-blocks">Code Blocks</h2> <p>Syntax highlighting is provided within <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> tags. An example of inline code snippets: <code class="language-plaintext highlighter-rouge">&lt;d-code language="html"&gt;let x = 10;&lt;/d-code&gt;</code>. For larger blocks of code, add a <code class="language-plaintext highlighter-rouge">block</code> attribute:</p> <d-code block="" language="javascript"> var x = 25; function(x) { return x * x; } </d-code> <p><strong>Note:</strong> <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> blocks do not look good in the dark mode. You can always use the default code-highlight using the <code class="language-plaintext highlighter-rouge">highlight</code> liquid tag:</p> <figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
<span class="k">return</span> <span class="nx">x</span> <span class="err">\</span><span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure> <hr/> <h2 id="interactive-plots">Interactive Plots</h2> <p>You can add interative plots using plotly + iframes :framed_picture:</p> <div class="l-page"> <iframe src="/assets/plotly/demo.html" frameborder="0" scrolling="no" height="500px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <p>The plot must be generated separately and saved into an HTML file. To generate the plot that you see above, you can use the following code snippet:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span>
<span class="sh">'</span><span class="s">https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv</span><span class="sh">'</span>
<span class="p">)</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">density_mapbox</span><span class="p">(</span>
<span class="n">df</span><span class="p">,</span>
<span class="n">lat</span><span class="o">=</span><span class="sh">'</span><span class="s">Latitude</span><span class="sh">'</span><span class="p">,</span>
<span class="n">lon</span><span class="o">=</span><span class="sh">'</span><span class="s">Longitude</span><span class="sh">'</span><span class="p">,</span>
<span class="n">z</span><span class="o">=</span><span class="sh">'</span><span class="s">Magnitude</span><span class="sh">'</span><span class="p">,</span>
<span class="n">radius</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
<span class="n">center</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">lat</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">lon</span><span class="o">=</span><span class="mi">180</span><span class="p">),</span>
<span class="n">zoom</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
<span class="n">mapbox_style</span><span class="o">=</span><span class="sh">"</span><span class="s">stamen-terrain</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">write_html</span><span class="p">(</span><span class="sh">'</span><span class="s">assets/plotly/demo.html</span><span class="sh">'</span><span class="p">)</span></code></pre></figure> <hr/> <h2 id="details-boxes">Details boxes</h2> <p>Details boxes are collapsible boxes which hide additional information from the user. They can be added with the <code class="language-plaintext highlighter-rouge">details</code> liquid tag:</p> <details><summary>Click here to know more</summary> <p>Additional details, where math \(2x - 1\) and <code class="language-plaintext highlighter-rouge">code</code> is rendered correctly.</p> </details> <hr/> <h2 id="layouts">Layouts</h2> <p>The main text column is referred to as the body. It is the assumed layout of any direct descendants of the <code class="language-plaintext highlighter-rouge">d-article</code> element.</p> <div class="fake-img l-body"> <p>.l-body</p> </div> <p>For images you want to display a little larger, try <code class="language-plaintext highlighter-rouge">.l-page</code>:</p> <div class="fake-img l-page"> <p>.l-page</p> </div> <p>All of these have an outset variant if you want to poke out from the body text a little bit. For instance:</p> <div class="fake-img l-body-outset"> <p>.l-body-outset</p> </div> <div class="fake-img l-page-outset"> <p>.l-page-outset</p> </div> <p>Occasionally you’ll want to use the full browser width. For this, use <code class="language-plaintext highlighter-rouge">.l-screen</code>. You can also inset the element a little from the edge of the browser by using the inset variant.</p> <div class="fake-img l-screen"> <p>.l-screen</p> </div> <div class="fake-img l-screen-inset"> <p>.l-screen-inset</p> </div> <p>The final layout is for marginalia, asides, and footnotes. It does not interrupt the normal flow of <code class="language-plaintext highlighter-rouge">.l-body</code> sized text except on mobile screen sizes.</p> <div class="fake-img l-gutter"> <p>.l-gutter</p> </div> <hr/> <h2 id="other-typography">Other Typography?</h2> <p>Emphasis, aka italics, with <em>asterisks</em> (<code class="language-plaintext highlighter-rouge">*asterisks*</code>) or <em>underscores</em> (<code class="language-plaintext highlighter-rouge">_underscores_</code>).</p> <p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p> <p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p> <p>Strikethrough uses two tildes. <del>Scratch this.</del></p> <ol> <li>First ordered list item</li> <li>Another item ⋅⋅* Unordered sub-list.</li> <li>Actual numbers don’t matter, just that it’s a number ⋅⋅1. Ordered sub-list</li> <li>And another item.</li> </ol> <p>⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p> <p>⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅ ⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅ ⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p> <ul> <li> <p>Unordered list can use asterisks</p> </li> <li> <p>Or minuses</p> </li> <li> <p>Or pluses</p> </li> </ul> <p><a href="https://www.google.com">I’m an inline-style link</a></p> <p><a href="https://www.google.com" title="Google's Homepage">I’m an inline-style link with title</a></p> <p><a href="https://www.mozilla.org">I’m a reference-style link</a></p> <p><a href="http://slashdot.org">You can use numbers for reference-style link definitions</a></p> <p>Or leave it empty and use the <a href="http://www.reddit.com">link text itself</a>.</p> <p>URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or <a href="http://www.example.com">http://www.example.com</a> and sometimes example.com (but not on Github, for example).</p> <p>Some text to show that the reference links can follow later.</p> <p>Here’s our logo (hover to see the title text):</p> <p>Inline-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 1"/></p> <p>Reference-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 2"/></p> <p>Inline <code class="language-plaintext highlighter-rouge">code</code> has <code class="language-plaintext highlighter-rouge">back-ticks around</code> it.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">JavaScript syntax highlighting</span><span class="dl">"</span><span class="p">;</span>
<span class="nf">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Python syntax highlighting</span><span class="sh">"</span>
<span class="k">print</span> <span class="n">s</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>No language indicated, so no syntax highlighting.
But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
</code></pre></div></div> <p>Colons can be used to align columns.</p> <table> <thead> <tr> <th>Tables</th> <th style="text-align: center">Are</th> <th style="text-align: right">Cool</th> </tr> </thead> <tbody> <tr> <td>col 3 is</td> <td style="text-align: center">right-aligned</td> <td style="text-align: right">$1600</td> </tr> <tr> <td>col 2 is</td> <td style="text-align: center">centered</td> <td style="text-align: right">$12</td> </tr> <tr> <td>zebra stripes</td> <td style="text-align: center">are neat</td> <td style="text-align: right">$1</td> </tr> </tbody> </table> <p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don’t need to make the raw Markdown line up prettily. You can also use inline Markdown.</p> <table> <thead> <tr> <th>Markdown</th> <th>Less</th> <th>Pretty</th> </tr> </thead> <tbody> <tr> <td><em>Still</em></td> <td><code class="language-plaintext highlighter-rouge">renders</code></td> <td><strong>nicely</strong></td> </tr> <tr> <td>1</td> <td>2</td> <td>3</td> </tr> </tbody> </table> <blockquote> <p>Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.</p> </blockquote> <p>Quote break.</p> <blockquote> <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p> </blockquote> <p>Here’s a line for us to start with.</p> <p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p> <p>This line is also a separate paragraph, but… This line is only separated by a single newline, so it’s a separate line in the <em>same paragraph</em>.</p>]]></content><author><name>Albert Einstein</name></author><category term="formatting"/><summary type="html"><![CDATA[an example of a distill-style blog post and main elements]]></summary></entry><entry><title type="html">Formatting Styles</title><link href="https://betagi.github.io/blog/2015/formatting/" rel="alternate" type="text/html" title="Formatting Styles"/><published>2015-03-15T15:15:15+00:00</published><updated>2015-03-15T15:15:15+00:00</updated><id>https://betagi.github.io/blog/2015/formatting</id><content type="html" xml:base="https://betagi.github.io/blog/2015/formatting/"><![CDATA[<details><summary>more about <code class="language-plaintext highlighter-rouge">sidebar</code></summary> <p>check the <a href="https://afeld.github.io/bootstrap-toc/">bootstrap-toc</a> documentation. Notice that you can even customize the text of the heading that will be displayed on the sidebar.</p> </details> <h1 id="1-文本格式">1. 文本格式</h1> <details><summary><strong>tabs</strong>的<a href="https://alshedivat.github.io/al-folio/blog/2024/tabs/">语法</a>：</summary> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%</span><span class="w"> </span><span class="nt">tabs</span><span class="w"> </span>组别名<span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span>组别名<span class="w"> </span>组别A<span class="w"> </span><span class="cp">%}</span>
内容。内容
<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">tab</span><span class="w"> </span>组别名<span class="w"> </span>组别B<span class="w"> </span><span class="cp">%}</span>
内容，内容
<span class="cp">{%</span><span class="w"> </span><span class="nt">endtab</span><span class="w"> </span><span class="cp">%}</span>
<span class="cp">{%</span><span class="w"> </span><span class="nt">endtabs</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div> </details> <ul id="txt" class="tab" data-tab="de03d8fc-7fa9-44c3-92ac-8344ce63885e" data-name="txt"> <li class="active" id="txt-pseudocode"> <a href="#">pseudocode</a> </li> <li id="txt----"> <a href="#">超链接 </a> </li> <li id="txt-todo"> <a href="#">todo </a> </li> <li id="txt-quote"> <a href="#">quote </a> </li> <li id="txt-list"> <a href="#">list </a> </li> <li id="txt-yaml"> <a href="#">yaml </a> </li> <li id="txt-json"> <a href="#">json </a> </li> <li id="txt-jupyter"> <a href="#">jupyter </a> </li> </ul> <ul class="tab-content" id="de03d8fc-7fa9-44c3-92ac-8344ce63885e" data-name="txt"> <li class="active"> <pre><code class="language-pseudocode">% Ackermann Procedure
\begin{algorithm}
\caption{Ackermann Function}
\begin{algorithmic}
\PROCEDURE{Ackermann}{$m, n$}
    \IF{$m = 0$}
        \RETURN $n + 1$
    \ELSIF{$m &gt; 0$ AND $n = 0$}
        \RETURN \CALL{Ackermann}{$m - 1, 1$}
    \ELSE
        \RETURN \CALL{Ackermann}{$m - 1, $ \CALL{Ackermann}{$m, n - 1$}} 
    \ENDIF
\ENDPROCEDURE
\end{algorithmic}
\end{algorithm}
</code></pre> </li> <li> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>markdown<span class="p">[</span><span class="nv">Pinterest</span><span class="p">](</span><span class="sx">https://www.pinterest.com</span><span class="p">)</span>  
html <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"https://en.wikipedia.org/wiki/Cold-pressed_juice"</span><span class="nt">&gt;</span>cold-pressed<span class="nt">&lt;/a&gt;</span> 
</code></pre></div></div> </li> <li> <ul class="task-list"> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked"/>Brush Teeth</li> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled"/>Put on socks <ul class="task-list"> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked"/>Put on left sock</li> <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled"/>Put on right sock</li> </ul> </li> </ul> </li> <li> <blockquote> <p>A quote</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A quote in markdown block
</code></pre></div> </div> </blockquote> </li> <li> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">-</span> brunch
<span class="p">  -</span> fixie
<span class="p">    -</span> raybans
<span class="p">+</span> sdf 
<span class="p">+</span> sdfsdf
<span class="p">+</span> list
<span class="p">    1.</span> sd 
<span class="p">    2.</span> sdf 
<span class="p"> 1.</span> sdf 
a. sdf
</code></pre></div></div> </li> <li> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">food</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">🥬"</span>
  <span class="pi">-</span> <span class="s2">"</span><span class="s">🍉"</span>
</code></pre></div></div> </li> <li> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"relationship"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"tiktok"</span><span class="p">,</span><span class="w"> </span><span class="s2">"ByteDance"</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div> </li> <li> <div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{::nomarkdown}



  &lt;div
  class="jupyter-notebook"
  style="position: relative; width: 100%; margin: 0 auto;"&gt;
  &lt;div class="jupyter-notebook-iframe-container"&gt;
    &lt;iframe
      src="/assets/jupyter/blog.ipynb.html"
      style="position: absolute; top: 0; left: 0; border-style: none;"
      width="100%"
      height="100%"
      onload="this.parentElement.style.paddingBottom = (this.contentWindow.document.documentElement.scrollHeight + 10) + 'px'"&gt;&lt;/iframe&gt;
  &lt;/div&gt;
&lt;/div&gt;


{:/nomarkdown}
</code></pre></div></div> </li> </ul> <details><summary><code class="language-plaintext highlighter-rouge">tabs</code>随记：</summary> <ul> <li>tabs子标签英文自动大写</li> <li>使用<code class="language-plaintext highlighter-rouge">endtabs</code>作为结束标签</li> <li>每个tab块都有两个属性（组名和标签名）</li> <li><del>有效的标签名</del></li> </ul> </details> <details><summary><code class="language-plaintext highlighter-rouge">pseudocode</code>随记</summary> <ul> <li><code class="language-plaintext highlighter-rouge">pseudocode</code>会自动编号，如Algorithm 1, Algorithm 2, …</li> <li>使用四个反引号（<code class="language-plaintext highlighter-rouge">）来表示代码块是为了嵌套代码块，例： </code>markdown ```pseudocode % BusyBeaver 函数 \begin{algorithm} \caption{Busy Beaver Function} \begin{algorithmic} \PROCEDURE{BusyBeaver}{$n$} \STATE $max_steps \gets 0$ \FORALL{图灵机 $T$ with $n$ states} \STATE $steps \gets$ \CALL{SimulateTuringMachine}{$T$} \IF{$steps &gt; max_steps$} \STATE $max_steps \gets steps$ \ENDIF \ENDFOR \RETURN $max_steps$ \ENDPROCEDURE</li> </ul> <p>\PROCEDURE{SimulateTuringMachine}{$T$} \STATE $current_state \gets initial_state$ \STATE $tape \gets$ an infinite tape initialized to all $0$s \STATE $head_position \gets 0$ \STATE $steps \gets 0$ \WHILE{$current_state$ is not a halting state} \STATE $symbol \gets$ symbol at $tape[head_position]$ \STATE $action \gets$ action defined by $T$ for $current_state$ and $symbol$ \STATE $tape[head_position] \gets$ action.write \STATE $head_position \gets head_position + action.move$ \STATE $current_state \gets$ action.next_state \STATE $steps \gets steps + 1$ \ENDWHILE \RETURN $steps$ \ENDPROCEDURE \end{algorithmic} \end{algorithm}</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code></code></pre></div></div> </details> <details><summary><code class="language-plaintext highlighter-rouge">code</code>随记：</summary> <ul> <li>在<code class="language-plaintext highlighter-rouge">liquid</code>tag中代码块显示行数：</li> </ul> <figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="code"><pre><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="err">\</span><span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
<span class="p">{</span>
<span class="n">string</span> <span class="n">myString</span><span class="p">;</span>

    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">"input a string: "</span><span class="p">;</span>
    <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">myString</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">length</span> <span class="o">=</span> <span class="n">myString</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>

    <span class="kt">char</span> <span class="n">charArray</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span> <span class="o">*</span> <span class="p">[</span><span class="n">length</span><span class="p">];</span>

    <span class="n">charArray</span> <span class="o">=</span> <span class="n">myString</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">length</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">charArray</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="s">" "</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>

<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure> <ul> <li><code class="language-plaintext highlighter-rouge">_config.yml</code>中<code class="language-plaintext highlighter-rouge">kramdown.syntax_highlighter_opts.block.line_numbers</code> 可调整</li> <li>更详细信息见：<a href="https://alshedivat.github.io/al-folio/blog/2015/math/">math</a>和<a href="https://alshedivat.github.io/al-folio/blog/2015/code/">code</a></li> </ul> </details> <details><summary><code class="language-plaintext highlighter-rouge">html</code>语言</summary> <p>水平线<code class="language-plaintext highlighter-rouge">&lt;hr&gt;</code>或者<code class="language-plaintext highlighter-rouge">&lt;hr style="border: none; border-top: 2px solid #ccc; width: 50%;"&gt;</code></p> </details> <hr style="border: none; border-top: 2px solid #ccc; width: 50%;"/> <h1 id="2图片">2.图片</h1> <details><summary>图片</summary> <ul> <li><code class="language-plaintext highlighter-rouge">thumbnail</code>是“封面图”</li> <li>2/3,1/3的比例<a href="https://alshedivat.github.io/al-folio/projects/1_project/">亦可操作</a></li> <li>Adding <code class="language-plaintext highlighter-rouge">data-zoomable</code> to <code class="language-plaintext highlighter-rouge">&lt;img&gt;</code> tags so that make images zoomable.</li> </ul> </details> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/example_img/11-480.webp 480w,/assets/img/example_img/11-800.webp 800w,/assets/img/example_img/11-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/example_img/11.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/example_img/12-480.webp 480w,/assets/img/example_img/12-800.webp 800w,/assets/img/example_img/12-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/example_img/12.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/example_img/7-480.webp 480w,/assets/img/example_img/7-800.webp 800w,/assets/img/example_img/7-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/example_img/7.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> 图片显示 <em>一行</em> <strong>三列</strong> </div> <h2 id="image-swiper-的语法">Image <a href="https://swiperjs.com/">Swiper</a> 的<a href="https://alshedivat.github.io/al-folio/blog/2024/advanced-images/">语法</a></h2> <swiper-container keyboard="true" navigation="true" pagination="true" pagination-clickable="true" pagination-dynamic-bullets="true" rewind="true"> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/example_img/9-480.webp 480w,/assets/img/example_img/9-800.webp 800w,/assets/img/example_img/9-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/example_img/9.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/example_img/7-480.webp 480w,/assets/img/example_img/7-800.webp 800w,/assets/img/example_img/7-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/example_img/7.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/example_img/8-480.webp 480w,/assets/img/example_img/8-800.webp 800w,/assets/img/example_img/8-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/example_img/8.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/example_img/10-480.webp 480w,/assets/img/example_img/10-800.webp 800w,/assets/img/example_img/10-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/example_img/10.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> <swiper-slide> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/example_img/12-480.webp 480w,/assets/img/example_img/12-800.webp 800w,/assets/img/example_img/12-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/example_img/12.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </swiper-slide> </swiper-container> <h2 id="img-comparison-slider"><a href="https://img-comparison-slider.sneas.io/">img-comparison-slider</a></h2> <img-comparison-slider> <figure slot="first"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic_color_einstein-480.webp 480w,/assets/img/prof_pic_color_einstein-800.webp 800w,/assets/img/prof_pic_color_einstein-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/prof_pic_color_einstein.jpg" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <figure slot="second"> <picture> <source class="responsive-img-srcset" srcset="/assets/img/prof_pic_einstein-480.webp 480w,/assets/img/prof_pic_einstein-800.webp 800w,/assets/img/prof_pic_einstein-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/prof_pic_einstein.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="lazy" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </img-comparison-slider> <hr style="border: none; border-top: 4px solid #ccc; width: 50%;"/> <h1 id="3图表">3.图表</h1> <ul id="chart" class="tab" data-tab="a40cfe87-ec5d-4442-a8f6-0383cff67deb" data-name="chart"> <li class="active" id="chart-vega-lite"> <a href="#">vega_lite</a> </li> <li id="chart-chartjs-doughnut-"> <a href="#">chartjs(doughnut)</a> </li> <li id="chart-chartjs-line-"> <a href="#">chartjs(line)</a> </li> <li id="chart-typograms"> <a href="#">typograms</a> </li> <li id="chart-tikzjax"> <a href="#">TikZJax</a> </li> <li id="chart-mermaid"> <a href="#">Mermaid</a> </li> </ul> <ul class="tab-content" id="a40cfe87-ec5d-4442-a8f6-0383cff67deb" data-name="chart"> <li class="active"> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">vega_lite
</span><span class="sb">{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "A dot plot showing each movie in the database, and the difference from the average movie rating. The display is sorted by year to visualize everything in sequential order. The graph is for all Movies before 2019.",
  "data": {
    "url": "https://raw.githubusercontent.com/vega/vega/main/docs/data/movies.json"
  },
  "transform": [
    {"filter": "datum['IMDB Rating'] != null"},
    {"filter": {"timeUnit": "year", "field": "Release Date", "range": [null, 2019]}},
    {
      "joinaggregate": [{
        "op": "mean",
        "field": "IMDB Rating",
        "as": "AverageRating"
      }]
    },
    {
      "calculate": "datum['IMDB Rating'] - datum.AverageRating",
      "as": "RatingDelta"
    }
  ],
  "mark": "point",
  "encoding": {
    "x": {
      "field": "Release Date",
      "type": "temporal"
    },
    "y": {
      "field": "RatingDelta",
      "type": "quantitative",
      "title": "Rating Delta"
    },
    "color": {
      "field": "RatingDelta",
      "type": "quantitative",
      "scale": {"domainMid": 0},
      "title": "Rating Delta"
    }
  }
}</span>
<span class="p">```</span>
</code></pre></div></div> </li> <li> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">chartjs
</span><span class="sb">{
  "type": "doughnut",
  "data": {
    "labels": [
      "Red",
      "Blue",
      "Yellow"
    ],
    "datasets": [
      {
        "data": [
          300,
          50,
          100
        ],
        "backgroundColor": [
          "#FF6384",
          "#36A2EB",
          "#FFCE56"
        ],
        "hoverBackgroundColor": [
          "#FF6384",
          "#36A2EB",
          "#FFCE56"
        ]
      }
    ]
  },
  "options": {}
}</span>
<span class="p">```</span>
</code></pre></div></div> </li> <li> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">chartjs
</span><span class="sb">{
  "type": "line",
  "data": {
    "labels": [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July"
    ],
    "datasets": [
      {
        "label": "# of bugs",
        "fill": false,
        "lineTension": 0.1,
        "backgroundColor": "rgba(75,192,192,0.4)",
        "borderColor": "rgba(75,192,192,1)",
        "borderCapStyle": "butt",
        "borderDash": [],
        "borderDashOffset": 0,
        "borderJoinStyle": "miter",
        "pointBorderColor": "rgba(75,192,192,1)",
        "pointBackgroundColor": "#fff",
        "pointBorderWidth": 1,
        "pointHoverRadius": 5,
        "pointHoverBackgroundColor": "rgba(75,192,192,1)",
        "pointHoverBorderColor": "rgba(220,220,220,1)",
        "pointHoverBorderWidth": 2,
        "pointRadius": 1,
        "pointHitRadius": 10,
        "data": [
          65,
          59,
          80,
          81,
          56,
          55,
          40
        ],
        "spanGaps": false
      }
    ]
  },
  "options": {}
}</span>
<span class="p">```</span>
</code></pre></div></div> </li> <li> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">typograms
</span><span class="sb">+----+
|    |---&gt; My first diagram!
+----+

.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.</span>
<span class="p">```</span>
</code></pre></div></div> </li> <li> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/tikz"</span><span class="nt">&gt;</span>
  <span class="se">\b</span>egin{tikzcd}
    A <span class="se">\a</span>rrow[r, "<span class="se">\p</span>hi"] <span class="se">\a</span>rrow[d, red]
      &amp; B <span class="se">\a</span>rrow[d, "<span class="se">\p</span>si" red] <span class="se">\\</span>
    C <span class="se">\a</span>rrow[r, red, "<span class="se">\e</span>ta" blue]
      &amp; |[blue, rotate=-15]| D
  <span class="se">\e</span>nd{tikzcd}
<span class="nt">&lt;/script&gt;</span>
</code></pre></div></div> </li> <li> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">mermaid
</span><span class="sb">sequenceDiagram
    participant John
    participant Alice
    Alice-&gt;&gt;John: Hello John, how are you?
    John--&gt;&gt;Alice: Great!</span>
<span class="p">```</span>
</code></pre></div></div> </li> </ul> <h2 id="vega-lite的语法"><a href="https://vega.github.io/vega-lite/">vega lite</a>的<a href="https://alshedivat.github.io/al-folio/blog/2024/vega-lite/">语法</a></h2> <pre><code class="language-vega_lite">{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "description": "A dot plot showing each movie in the database, and the difference from the average movie rating. The display is sorted by year to visualize everything in sequential order. The graph is for all Movies before 2019.",
  "data": {
    "url": "https://raw.githubusercontent.com/vega/vega/main/docs/data/movies.json"
  },
  "transform": [
    {"filter": "datum['IMDB Rating'] != null"},
    {"filter": {"timeUnit": "year", "field": "Release Date", "range": [null, 2019]}},
    {
      "joinaggregate": [{
        "op": "mean",
        "field": "IMDB Rating",
        "as": "AverageRating"
      }]
    },
    {
      "calculate": "datum['IMDB Rating'] - datum.AverageRating",
      "as": "RatingDelta"
    }
  ],
  "mark": "point",
  "encoding": {
    "x": {
      "field": "Release Date",
      "type": "temporal"
    },
    "y": {
      "field": "RatingDelta",
      "type": "quantitative",
      "title": "Rating Delta"
    },
    "color": {
      "field": "RatingDelta",
      "type": "quantitative",
      "scale": {"domainMid": 0},
      "title": "Rating Delta"
    }
  }
}
</code></pre> <p>another example:</p> <pre><code class="language-vega_lite">{
  "$schema": "https://vega.github.io/schema/vega-lite/v5.json",
  "data": {
      "url": "https://raw.githubusercontent.com/vega/vega/main/docs/data/seattle-weather.csv"
  },
  "title": "Daily Max Temperatures (C) in Seattle, WA",
  "config": {
      "view": {
          "strokeWidth": 0,
          "step": 13
      },
      "axis": {
          "domain": false
      }
  },
  "mark": "rect",
  "encoding": {
      "x": {
          "field": "date",
          "timeUnit": "date",
          "type": "ordinal",
          "title": "Day",
          "axis": {
              "labelAngle": 0,
              "format": "%e"
          }
      },
      "y": {
          "field": "date",
          "timeUnit": "month",
          "type": "ordinal",
          "title": "Month"
      },
      "color": {
          "field": "temp_max",
          "aggregate": "max",
          "type": "quantitative",
          "legend": {
              "title": null
          }
      }
  }
}
</code></pre> <p>This plot supports both light and dark themes.</p> <h2 id="chartjs-的语法"><a href="https://www.chartjs.org/">chart.js</a> 的<a href="https://alshedivat.github.io/al-folio/blog/2024/chartjs/">语法</a></h2> <pre><code class="language-chartjs">{
  "type": "line",
  "data": {
    "labels": [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July"
    ],
    "datasets": [
      {
        "label": "# of bugs",
        "fill": false,
        "lineTension": 0.1,
        "backgroundColor": "rgba(75,192,192,0.4)",
        "borderColor": "rgba(75,192,192,1)",
        "borderCapStyle": "butt",
        "borderDash": [],
        "borderDashOffset": 0,
        "borderJoinStyle": "miter",
        "pointBorderColor": "rgba(75,192,192,1)",
        "pointBackgroundColor": "#fff",
        "pointBorderWidth": 1,
        "pointHoverRadius": 5,
        "pointHoverBackgroundColor": "rgba(75,192,192,1)",
        "pointHoverBorderColor": "rgba(220,220,220,1)",
        "pointHoverBorderWidth": 2,
        "pointRadius": 1,
        "pointHitRadius": 10,
        "data": [
          65,
          59,
          80,
          81,
          56,
          55,
          40
        ],
        "spanGaps": false
      }
    ]
  },
  "options": {}
}
</code></pre> <p>Also another example chart.</p> <pre><code class="language-chartjs">{
  "type": "doughnut",
  "data": {
    "labels": [
      "Red",
      "Blue",
      "Yellow"
    ],
    "datasets": [
      {
        "data": [
          300,
          50,
          100
        ],
        "backgroundColor": [
          "#FF6384",
          "#36A2EB",
          "#FFCE56"
        ],
        "hoverBackgroundColor": [
          "#FF6384",
          "#36A2EB",
          "#FFCE56"
        ]
      }
    ]
  },
  "options": {}
}
</code></pre> <h2 id="echarts的语法"><a href="https://echarts.apache.org/">echarts</a>的<a href="https://alshedivat.github.io/al-folio/blog/2024/echarts/">语法</a></h2> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">echarts
</span><span class="sb">{
  "title": {
    "text": "ECharts Getting Started Example"
  },
  "responsive": true,
  "tooltip": {},
  "legend": {
    "top": "30px",
    "data": ["sales"]
  },
  "xAxis": {
    "data": ["Shirts", "Cardigans", "Chiffons", "Pants", "Heels", "Socks"]
  },
  "yAxis": {},
  "series": [
    {
      "name": "sales",
      "type": "bar",
      "data": [5, 20, 36, 10, 10, 20]
    }
  ]
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-echarts">{
  "title": {
    "text": "ECharts Getting Started Example"
  },
  "responsive": true,
  "tooltip": {},
  "legend": {
    "top": "30px",
    "data": ["sales"]
  },
  "xAxis": {
    "data": ["Shirts", "Cardigans", "Chiffons", "Pants", "Heels", "Socks"]
  },
  "yAxis": {},
  "series": [
    {
      "name": "sales",
      "type": "bar",
      "data": [5, 20, 36, 10, 10, 20]
    }
  ]
}
</code></pre> <p>Note that this library offer support for both light and dark themes.</p> <h2 id="typograms的语法"><a href="https://google.github.io/typograms/">typograms</a>的<a href="https://alshedivat.github.io/al-folio/blog/2024/typograms/">语法</a></h2> <pre><code class="language-typograms">+----+
|    |---&gt; My first diagram!
+----+

.------------------------.
|.----------------------.|
||"https://example.com" ||
|'----------------------'|
| ______________________ |
||                      ||
||   Welcome!           ||
||                      ||
||                      ||
||  .----------------.  ||
||  | username       |  ||
||  '----------------'  ||
||  .----------------.  ||
||  |"*******"       |  ||
||  '----------------'  ||
||                      ||
||  .----------------.  ||
||  |   "Sign-up"    |  ||
||  '----------------'  ||
||                      ||
|+----------------------+|
.------------------------.
</code></pre> <h2 id="tikzjax的语法"><a href="https://tikzjax.com/">TikZJax</a>的<a href="https://alshedivat.github.io/al-folio/blog/2023/tikzjax/">语法</a></h2> <script type="text/tikz">
  \begin{tikzcd}
    A \arrow[r, "\phi"] \arrow[d, red]
      & B \arrow[d, "\psi" red] \\
    C \arrow[r, red, "\eta" blue]
      & |[blue, rotate=-15]| D
  \end{tikzcd}
</script> <h2 id="mermaid的语法"><a href="https://mermaid-js.github.io/mermaid/" target="\_blank">Mermaid</a>的<a href="https://alshedivat.github.io/al-folio/blog/2021/diagrams/">语法</a></h2> <pre><code class="language-mermaid">sequenceDiagram
    participant John
    participant Alice
    Alice-&gt;&gt;John: Hello John, how are you?
    John--&gt;&gt;Alice: Great!
</code></pre> <hr style="border: none; border-top: 4px solid #333; width: 50%;"/> <h1 id="4表格的语法">4.表格的<a href="https://alshedivat.github.io/al-folio/blog/2023/tables/">语法</a></h1> <h2 id="simple-example">Simple Example</h2> <p>First, add the following to the post’s front matter</p> <p>Then, the following syntax</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>| Left aligned | Center aligned | Right aligned |
| :----------- | :------------: | ------------: |
| Left 1       |    center 1    |       right 1 |
| Left 2       |    center 2    |       right 2 |
| Left 3       |    center 3    |       right 3 |
</code></pre></div></div> <p>will generate</p> <table> <thead> <tr> <th style="text-align: left">Left aligned</th> <th style="text-align: center">Center aligned</th> <th style="text-align: right">Right aligned</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">Left 1</td> <td style="text-align: center">center 1</td> <td style="text-align: right">right 1</td> </tr> <tr> <td style="text-align: left">Left 2</td> <td style="text-align: center">center 2</td> <td style="text-align: right">right 2</td> </tr> <tr> <td style="text-align: left">Left 3</td> <td style="text-align: center">center 3</td> <td style="text-align: right">right 3</td> </tr> </tbody> </table> <p></p> <h2 id="html-example">HTML Example</h2> <p>It is also possible to use HTML to display tables. For example, the following HTML code will display a table with <a href="https://bootstrap-table.com/">Bootstrap Table</a>, loaded from a JSON file:</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;table</span> <span class="na">id=</span><span class="s">"table"</span> <span class="na">data-toggle=</span><span class="s">"table"</span> <span class="na">data-url=</span><span class="s">"{{ '/assets/json/table_data.json' | relative_url }}"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;thead&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"id"</span><span class="nt">&gt;</span>ID<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"name"</span><span class="nt">&gt;</span>Item Name<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"price"</span><span class="nt">&gt;</span>Item Price<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
  <span class="nt">&lt;/thead&gt;</span>
<span class="nt">&lt;/table&gt;</span>
</code></pre></div></div> <table data-toggle="table" data-url="/assets/json/table_data.json"> <thead> <tr> <th data-field="id">ID</th> <th data-field="name">Item Name</th> <th data-field="price">Item Price</th> </tr> </thead> </table> <p></p> <h2 id="more-complex-example">More Complex Example</h2> <p>By using <a href="https://bootstrap-table.com/">Bootstrap Table</a> it is possible to create pretty complex tables, with pagination, search, and more. For example, the following HTML code will display a table, loaded from a JSON file, with pagination, search, checkboxes, and header/content alignment. For more information, check the <a href="https://examples.bootstrap-table.com/index.html">documentation</a>.</p> <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;table</span>
  <span class="na">data-click-to-select=</span><span class="s">"true"</span>
  <span class="na">data-height=</span><span class="s">"460"</span>
  <span class="na">data-pagination=</span><span class="s">"true"</span>
  <span class="na">data-search=</span><span class="s">"true"</span>
  <span class="na">data-toggle=</span><span class="s">"table"</span>
  <span class="na">data-url=</span><span class="s">"{{ '/assets/json/table_data.json' | relative_url }}"</span>
<span class="nt">&gt;</span>
  <span class="nt">&lt;thead&gt;</span>
    <span class="nt">&lt;tr&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-checkbox=</span><span class="s">"true"</span><span class="nt">&gt;&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"id"</span> <span class="na">data-halign=</span><span class="s">"left"</span> <span class="na">data-align=</span><span class="s">"center"</span> <span class="na">data-sortable=</span><span class="s">"true"</span><span class="nt">&gt;</span>ID<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"name"</span> <span class="na">data-halign=</span><span class="s">"center"</span> <span class="na">data-align=</span><span class="s">"right"</span> <span class="na">data-sortable=</span><span class="s">"true"</span><span class="nt">&gt;</span>Item Name<span class="nt">&lt;/th&gt;</span>
      <span class="nt">&lt;th</span> <span class="na">data-field=</span><span class="s">"price"</span> <span class="na">data-halign=</span><span class="s">"right"</span> <span class="na">data-align=</span><span class="s">"left"</span> <span class="na">data-sortable=</span><span class="s">"true"</span><span class="nt">&gt;</span>Item Price<span class="nt">&lt;/th&gt;</span>
    <span class="nt">&lt;/tr&gt;</span>
  <span class="nt">&lt;/thead&gt;</span>
<span class="nt">&lt;/table&gt;</span>
</code></pre></div></div> <table data-click-to-select="true" data-height="460" data-pagination="true" data-search="true" data-toggle="table" data-url="/assets/json/table_data.json"> <thead> <tr> <th data-checkbox="true"></th> <th data-field="id" data-halign="left" data-align="center" data-sortable="true">ID</th> <th data-field="name" data-halign="center" data-align="right" data-sortable="true">Item Name</th> <th data-field="price" data-halign="right" data-align="left" data-sortable="true">Item Price</th> </tr> </thead> </table> <h1 id="5-音视频的语法">5. 音视频的<a href="https://alshedivat.github.io/al-folio/blog/2023/videos/">语法</a></h1> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="/assets/audio/epicaly-short-113909.mp3" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <audio src="https://cdn.pixabay.com/download/audio/2022/06/25/audio_69a61cd6d6.mp3" controls=""/> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between video rows, after each row, or doesn't have to be there at all. </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/pexels-engin-akyurt-6069112-960x540-30fps.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" autoplay="" controls=""/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <video src="/assets/video/pexels-engin-akyurt-6069112-960x540-30fps.mp4" class="img-fluid rounded z-depth-1" width="auto" height="auto" controls=""/> </figure> </div> </div> <div class="caption"> A simple, elegant caption looks good between video rows, after each row, or doesn't have to be there at all. </div> <p>It does also support embedding videos from different sources. Here are some examples:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <iframe src="https://www.youtube.com/embed/jNQXAC9IVRw" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="auto"/> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <iframe src="https://player.vimeo.com/video/524933864?h=1ac4fd9fb4&amp;title=0&amp;byline=0&amp;portrait=0" class="img-fluid rounded z-depth-1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="" width="auto" height="auto"/> </figure> </div> </div> <h1 id="6-其他特殊格式">6. 其他特殊格式：</h1> <h2 id="jupyter-nb的语法">jupyter nb的<a href="https://alshedivat.github.io/al-folio/blog/2023/jupyter-notebook/">语法</a></h2> <p>【暂略】</p> <h2 id="redirect链接">redirect链接</h2> <p>adding the following to the post’s front matter</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">layout</span><span class="pi">:</span> <span class="s">post</span>
<span class="na">redirect</span><span class="pi">:</span> <span class="s">/assets/pdf/example_pdf.pdf</span>
<span class="nn">---</span>
</code></pre></div></div> <h2 id="blockquote的语法">Blockquote的<a href="https://alshedivat.github.io/al-folio/blog/2023/custom-blockquotes/">语法</a></h2> <p>This post shows how to add custom styles for blockquotes. Based on <a href="https://github.com/sighingnow/jekyll-gitbook">jekyll-gitbook</a> implementation.</p> <p>We decided to support the same custom blockquotes as in <a href="https://sighingnow.github.io/jekyll-gitbook/jekyll/2022-06-30-tips_warnings_dangers.html">jekyll-gitbook</a>, which are also found in a lot of other sites’ styles. The styles definitions can be found on the <a href="https://github.com/alshedivat/al-folio/blob/master/_sass/_base.scss">_base.scss</a> file, more specifically:</p> <div class="language-scss highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* Tips, warnings, and dangers */</span>
<span class="nc">.post</span> <span class="nc">.post-content</span> <span class="nt">blockquote</span> <span class="p">{</span>
  <span class="k">&amp;</span><span class="nc">.block-tip</span> <span class="p">{</span>
    <span class="nl">border-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block</span><span class="p">);</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block-bg</span><span class="p">);</span>

    <span class="nt">p</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block-text</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nt">h1</span><span class="o">,</span>
    <span class="nt">h2</span><span class="o">,</span>
    <span class="nt">h3</span><span class="o">,</span>
    <span class="nt">h4</span><span class="o">,</span>
    <span class="nt">h5</span><span class="o">,</span>
    <span class="nt">h6</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-tip-block-title</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">&amp;</span><span class="nc">.block-warning</span> <span class="p">{</span>
    <span class="nl">border-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block</span><span class="p">);</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block-bg</span><span class="p">);</span>

    <span class="nt">p</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block-text</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nt">h1</span><span class="o">,</span>
    <span class="nt">h2</span><span class="o">,</span>
    <span class="nt">h3</span><span class="o">,</span>
    <span class="nt">h4</span><span class="o">,</span>
    <span class="nt">h5</span><span class="o">,</span>
    <span class="nt">h6</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-warning-block-title</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">&amp;</span><span class="nc">.block-danger</span> <span class="p">{</span>
    <span class="nl">border-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block</span><span class="p">);</span>
    <span class="nl">background-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block-bg</span><span class="p">);</span>

    <span class="nt">p</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block-text</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="nt">h1</span><span class="o">,</span>
    <span class="nt">h2</span><span class="o">,</span>
    <span class="nt">h3</span><span class="o">,</span>
    <span class="nt">h4</span><span class="o">,</span>
    <span class="nt">h5</span><span class="o">,</span>
    <span class="nt">h6</span> <span class="p">{</span>
      <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="o">--</span><span class="n">global-danger-block-title</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div> <p>A regular blockquote can be used as following:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; This is a regular blockquote</span>
<span class="gt">&gt; and it can be used as usual</span>
</code></pre></div></div> <blockquote> <p>This is a regular blockquote and it can be used as usual</p> </blockquote> <p>These custom styles can be used by adding the specific class to the blockquote, as follows:</p> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### TIP</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; A tip can be used when you want to give advice</span>
<span class="gt">&gt; related to a certain content.</span>
{: .block-tip }
</code></pre></div></div> <blockquote class="block-tip"> <h5 id="tip">TIP</h5> <p>A tip can be used when you want to give advice related to a certain content.</p> </blockquote> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### WARNING</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This is a warning, and thus should</span>
<span class="gt">&gt; be used when you want to warn the user</span>
{: .block-warning }
</code></pre></div></div> <blockquote class="block-warning"> <h5 id="warning">WARNING</h5> <p>This is a warning, and thus should be used when you want to warn the user</p> </blockquote> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gt">&gt; ##### DANGER</span>
<span class="gt">&gt;</span>
<span class="gt">&gt; This is a danger zone, and thus should</span>
<span class="gt">&gt; be used carefully</span>
{: .block-danger }
</code></pre></div></div> <blockquote class="block-danger"> <h5 id="danger">DANGER</h5> <p>This is a danger zone, and thus should be used carefully</p> </blockquote> <h2 id="geojson的语法"><a href="https://geojson.org/">geojson</a>的<a href="https://alshedivat.github.io/al-folio/blog/2024/geojson-map/">语法</a></h2> <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">```</span><span class="nl">geojson
</span><span class="sb">{
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "coordinates": [
          [
            [
              -60.11363029935569,
              -2.904625022183211
            ],
            [
              -60.11363029935569,
              -3.162613728707967
            ],
            [
              -59.820894493858034,
              -3.162613728707967
            ],
            [
              -59.820894493858034,
              -2.904625022183211
            ],
            [
              -60.11363029935569,
              -2.904625022183211
            ]
          ]
        ],
        "type": "Polygon"
      }
    }
  ]
}</span>
<span class="p">```</span>
</code></pre></div></div> <p>Which generates:</p> <pre><code class="language-geojson">{
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "properties": {},
      "geometry": {
        "coordinates": [
          [
            [
              -60.11363029935569,
              -2.904625022183211
            ],
            [
              -60.11363029935569,
              -3.162613728707967
            ],
            [
              -59.820894493858034,
              -3.162613728707967
            ],
            [
              -59.820894493858034,
              -2.904625022183211
            ],
            [
              -60.11363029935569,
              -2.904625022183211
            ]
          ]
        ],
        "type": "Polygon"
      }
    }
  ]
}
</code></pre> <h2 id="code-diff-语法">code diff <a href="https://alshedivat.github.io/al-folio/blog/2024/code-diff/">语法</a></h2> <p>【暂略】</p> <h2 id="twitter语法">twitter<a href="https://alshedivat.github.io/al-folio/blog/2021/diagrams/">语法</a></h2> <p>【暂略】</p>]]></content><author><name></name></author><category term="formatting"/><summary type="html"><![CDATA[一文总结所有格式]]></summary></entry></feed>